<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dream Afar</title>
  
  <subtitle>A new way to explore the world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangmj.xin/"/>
  <updated>2018-04-27T14:19:37.315Z</updated>
  <id>https://yangmj.xin/</id>
  
  <author>
    <name>Eric Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Head First 设计模式》之观察者模式</title>
    <link href="https://yangmj.xin/2018/04/27/%E3%80%8AHead%20First%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yangmj.xin/2018/04/27/《Head First 设计模式》之观察者模式/</id>
    <published>2018-04-27T13:50:14.000Z</published>
    <updated>2018-04-27T14:19:37.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《Head-First-设计模式》之观察者模式"><a href="#《Head-First-设计模式》之观察者模式" class="headerlink" title="《Head First 设计模式》之观察者模式"></a>《Head First 设计模式》之观察者模式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　昨天lz写了一篇关于策略模式的文章，感觉这篇文章写了很久才完成，而且自我感觉写的并不是很好。究其原因lz发现有以下几点。第一，lz对设计模式刚开始接触，现在也仅仅只是停留在概念阶段，没有付诸实践，没有将这些设计理论运用到项目中去，可能现在对lz来讲很难讲其吃透，不过这也能理解，对新知识的学习毕竟是要循序渐进。第二，lz觉得自己的写作能力有所欠缺，高中语文确实是没学好呃，这个只能慢慢改善了。</p><p>　　关于写博客这件事，lz看到一句话觉得说的很合理，故献给大家望共勉。“当别人请我给他们一些写 blog 的建议，我总是回他：挑个你自认为可以的时间行程安排，什么时候开始写 blog，预计多久写一篇文，开始动工，并坚持下去。在你这么做之前，任何建议对你来说都是不重要的。你文章是否写得很糟糕不重要，是否没有任何人会看你的 blog 不重要，是不是没啥有趣的东西可以记录也不重要。重要的是，只要你能透过写文来表现出写作的意愿，而且渴望持续地写作，检视、思考与改善自己的写作，你终究会成功的。”</p><a id="more"></a><h2 id="今日分享"><a href="#今日分享" class="headerlink" title="今日分享"></a>今日分享</h2><p>　　正如之前写到的一样，这块内容以后每篇文章前面都会推送给大家。今天给大家带来了两句话。</p><p>　　1.该舍的，舍不得，只顾着跟往事瞎扯，等你发现时间是贼了，它早已偷光你的选择！</p><p>　　2.一句英文，Life is like a ball, your initial steps of the church who may not be able to accompany you come to finish. 人生就像一场舞会，教会你最初舞步的人，未必能陪你走到散场。不乱于心，不困于情，不畏将来，不念过往。“如果微笑成为习惯，快乐也会成为习惯”</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>　　观察者模式是JDK中使用最多的模式之一，比如我们常用的java.util包，JavaBeans和Swing中，后续我们再做进一步介绍。可通俗点理解该模式为：能让你的对象知悉现况，不会错过该对象感兴趣的事情。</p><h3 id="认识观察者模式"><a href="#认识观察者模式" class="headerlink" title="　　认识观察者模式"></a>　　认识观察者模式</h3><p>　　首先看看报纸和杂志的订阅是怎么回事：</p><p>　　1.报社的业务就是出版报纸。</p><p>　　2.向某家报社订阅报纸，只要他们有新报纸出版，就会给你送来。你要你是他们的订户，你就会一直受到新报纸。</p><p>　　3.当你不想再看报纸的时候，取消订阅，他们就不会再送新报纸来。</p><p>　　4.只要报社还在运营，就会一直有人（或单位）向他们订阅报纸或取消报纸。</p><p>我想大家从上面的这份关系中可以初步了解观察者模式，其实出版者+订阅者=观察者模式。不过我们习惯将出版者称为“主题”（Subject）,订阅者称为“观察者”（Observer）。现用浅显的话语解释下，首先主题对象管理着某些数据，观察者已经订阅（注册）主题以便在主题数据改变时能够收到更新。其次当主题内的数据改变时，就会通知观察者，也即：新的数据会以某种形式送到观察者手上。当然，如果某个对象不是观察者，即使主题数据更新时也不会将新的数据通知到此对象。</p><h3 id="定义观察者模式"><a href="#定义观察者模式" class="headerlink" title="　　定义观察者模式"></a>　　定义观察者模式</h3><p>　　现给出观察者模式官方解释：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。可以理解为，主题和观察者定义了一对多关系。观察者依赖于此主题，只要主题状态一有变化，观察者就会被通知。根据通知的风格，观察者可能因此新值而更新。其实实现观察者模式的方法不止一种，但是以包含Subject和Observer接口的类设计的做法最为常见，下面给出该模式类图。</p><p>UML类图</p><p><img src="https://yangmj.xin/uploads/photos/观察者模式官方UML" alt=""></p><h3 id="气象站实例"><a href="#气象站实例" class="headerlink" title="　　气象站实例"></a>　　气象站实例</h3><p>　　现给出具体需求：某公司需要建立下一代气象站，且必须建立在给出的WeatherData对象上，由该对象负责追踪目前的天气状况（温度，湿度，气压）。希望能建立一个应用，有三种布告板，分别显示目前的状况，气象统计及简单的预报。当WeatherData对象获得最新的测量数据时，三种布告板必须要实时更新。最后这是一个可扩展的气象站，也即：希望能实现自己的布告板并插入到此应用中。</p><p>　　现给出该应用UML图：<br><img src="https://yangmj.xin/uploads/photos/观察者模式UML-示例" alt=""></p><p>下面我们再来具体实现该气象站，首先从接口开始，</p><p>主题接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> xin.yangmj.observer.subject;</div><div class="line"></div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.observe.Observer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 这是主题接口，所有具体主题都应实现此接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-10-07 下午3:56</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>观察者接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xin.yangmj.observer.observe;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 这是观察者接口，所有具体观察者都应实现此接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-10-07 下午4:00</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>布告板接口，也即：具体布告板要实现此接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xin.yangmj.observer.observe;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 这是布告板接口，用来展示获取到的数据</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-10-07 下午4:06</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后，在写出具体的实现类</p><p>首先是具体主题实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xin.yangmj.observer.subject.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.observe.Observer;</div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.subject.Subject;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 这是WeatherData类，实现主题接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-10-07 下午4:08</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 用来封装主题所管理的观察者</span></div><div class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 用于注册观察者到该主题中</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line">        observers.add(o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 若观察者想取消注册，则调用该方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> i = observers.indexOf(<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</div><div class="line">            observers.remove(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 通知观察者，将主题最新数据告知每个注册的观察者</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</div><div class="line">            observer.update(temperature, humidity, pressure);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 当从气象站得到更新观测值时，通知观察者</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        notifyObserver();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 动态改变观测值</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> temperature</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> humidity</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pressure</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.temperature = temperature;</div><div class="line">        <span class="keyword">this</span>.humidity = humidity;</div><div class="line">        <span class="keyword">this</span>.pressure = pressure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// WeatherData的其他方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>给出某一个布告板实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xin.yangmj.observer.observe.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.observe.DisplayElement;</div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.observe.Observer;</div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.subject.Subject;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体布告板，相当于具体观察者实现类</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-10-07 下午4:28</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">    <span class="keyword">private</span> Subject weatherData;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 通过构造器，可以将此观察者注册到主题中</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> weatherData</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.weatherData = weatherData;</div><div class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 当观测值更新时，将最新数据保存起来</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> temperature</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> humidity</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pressure</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.temperature = temperature;</div><div class="line">        <span class="keyword">this</span>.humidity = humidity;</div><div class="line">        display();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 在该布告板上展示最新的观测值数据</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Current conditions: "</span> + temperature +</div><div class="line">                <span class="string">"F degrees and "</span> + humidity + <span class="string">"% humidity"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>启动气象站，测试用例：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xin.yangmj.observer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.observe.impl.CurrentConditionsDisplay;</div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.subject.impl.WeatherData;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 测试类，可用于启动气象站</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @author Eric Yang</span></div><div class="line"><span class="comment"> * @create 2017-10-07 下午4:39</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args)&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 创建具体主题，并初始化所管理的观察者为空</span></div><div class="line">        WeatherData weatherData = <span class="keyword">new</span> <span class="type">WeatherData</span>();</div><div class="line"></div><div class="line">        <span class="comment">// 暂时只写一个面板，其他类似eg:StatisticsDisplay, ForecastDisplay等</span></div><div class="line">        <span class="comment">// 也可以后续扩展，实现自己特定的面板</span></div><div class="line">        <span class="comment">// 创建该观察者，隐含了将该观察者注册到上面具体主题中</span></div><div class="line">        CurrentConditionsDisplay currentConditionsDisplay =</div><div class="line">                <span class="keyword">new</span> <span class="type">CurrentConditionsDisplay</span>(weatherData);</div><div class="line"></div><div class="line">        weatherData.setMeasurements(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4</span>f);</div><div class="line">        <span class="comment">// 通知观察者</span></div><div class="line">        weatherData.notifyObserver();</div><div class="line">        <span class="comment">// 测量值发生变化</span></div><div class="line">        weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">29.3</span>f);</div><div class="line">        weatherData.measurementsChanged();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://yangmj.xin/uploads/photos/0D11E3DC-62A6-4D99-A5AF-BE8E4C72B6FF.png" alt=""></p><p>OK，以上就是整个气象站应用的代码。现对整个应用做个总结如下</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="　　设计原则"></a>　　设计原则</h3><p>　　观察者模式遵循了以下几个设计原则：</p><p>　　1.为了交互对象之间的松耦合而努力。也即：让主题和观察者之间松耦合。关于观察者的一切，主题只知道观察者实现了某个接口（也就是Observer接口），主题不需要知道观察者的具体类是谁，做了些什么或其他任何细节。有新类型的观察者出现时，主题的代码不需要修改，因为主题唯一依赖的东西是一个实现Observer接口的对象列表。我们可以独立地复用主题或观察者，改变主题或观察者其中一方，并不会影响另一方，所以二者是松耦合的。</p><p>　　2.封装变化。在此模式中，会改变的是主题的状态，以及观察者的数目是类型。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题，也即：提前规划。</p><p>　　3.针对接口编程。主题和观察者都是用接口：观察者利用主题的接口想主题注册，而主题利用观察者接口通知观察者。这样可以让二者之间运作正常，又同时具有松耦合的有点。</p><p>　　4.多用组合，少用继承。该模式利用“组合”将许多观察者组合进主题中。对象之间的这种关系不是通过继承产生的，而是在运行时利用组合的方式来产生的。</p><p>　　使用Java内置的观察者模式</p><p>　　未完待续…　　</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《Head-First-设计模式》之观察者模式&quot;&gt;&lt;a href=&quot;#《Head-First-设计模式》之观察者模式&quot; class=&quot;headerlink&quot; title=&quot;《Head First 设计模式》之观察者模式&quot;&gt;&lt;/a&gt;《Head First 设计模式》之观察者模式&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　昨天lz写了一篇关于策略模式的文章，感觉这篇文章写了很久才完成，而且自我感觉写的并不是很好。究其原因lz发现有以下几点。第一，lz对设计模式刚开始接触，现在也仅仅只是停留在概念阶段，没有付诸实践，没有将这些设计理论运用到项目中去，可能现在对lz来讲很难讲其吃透，不过这也能理解，对新知识的学习毕竟是要循序渐进。第二，lz觉得自己的写作能力有所欠缺，高中语文确实是没学好呃，这个只能慢慢改善了。&lt;/p&gt;
&lt;p&gt;　　关于写博客这件事，lz看到一句话觉得说的很合理，故献给大家望共勉。“当别人请我给他们一些写 blog 的建议，我总是回他：挑个你自认为可以的时间行程安排，什么时候开始写 blog，预计多久写一篇文，开始动工，并坚持下去。在你这么做之前，任何建议对你来说都是不重要的。你文章是否写得很糟糕不重要，是否没有任何人会看你的 blog 不重要，是不是没啥有趣的东西可以记录也不重要。重要的是，只要你能透过写文来表现出写作的意愿，而且渴望持续地写作，检视、思考与改善自己的写作，你终究会成功的。”&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://yangmj.xin/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yangmj.xin/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
