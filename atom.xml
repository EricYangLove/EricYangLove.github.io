<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dream Afar</title>
  
  <subtitle>A new way to explore the world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangmj.xin/"/>
  <updated>2019-08-31T02:25:06.248Z</updated>
  <id>https://yangmj.xin/</id>
  
  <author>
    <name>Eric Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Head First 设计模式》之工厂模式</title>
    <link href="https://yangmj.xin/2018/08/23/design-patterns-factory/"/>
    <id>https://yangmj.xin/2018/08/23/design-patterns-factory/</id>
    <published>2018-08-23T13:25:35.000Z</published>
    <updated>2019-08-31T02:25:06.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日分享："><a href="#今日分享：" class="headerlink" title="今日分享："></a>今日分享：</h2><p>　　1.努力做一个可爱的人。不埋怨谁，不嘲笑谁，也不羡慕谁，阳光下灿烂，风雨中奔跑，做自己的梦，走自己的路。</p><p>　　2.一句英文，The sign of maturity is not when you start speaking big things, but, actually it is, when you start understanding small things.成熟的标志不是会说大道理，而是你开始去理解身边的小事情。</p><p>　　人生的旅途中，最清晰的脚印，往往印在最泥泞的路上，所以，别畏惧暂时的困顿，即使无人鼓掌，也要全情投入，优雅坚持。真正改变命运的，并不是等来的机遇，而是我们的态度。</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>　　工厂（factory）用来处理创建对象的细节。工厂模式实质上应该包含三部分，<strong>简单工厂、工厂方法和抽象工厂</strong>。我们会按照次序来一一介绍这三部分。</p><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>　　简单工厂其实算不上是一个真正意义上的设计模式，反而比较像是一种编程习惯。它仅仅只是封装了创建对象的细节。下面看一个具体的实例。假设你有一个披萨店，有很多类型的披萨。如何根据不同的条件创建正确类型的披萨。现给出具体的代码：</p><p>　　披萨接口及其实现类：　</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> package xin.yangmj.factory.simple.pizza;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 4  * 这是披萨接口</span></div><div class="line"><span class="comment"> 5  *</span></div><div class="line"><span class="comment"> 6  * @author Eric Yang</span></div><div class="line"><span class="comment"> 7  * @create 2017-10-28 下午4:09</span></div><div class="line"><span class="comment"> 8  **/</span></div><div class="line"> <span class="number">9</span> public interface Pizza &#123;</div><div class="line"><span class="number">10</span> </div><div class="line"><span class="number">11</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">12      * 准备阶段</span></div><div class="line"><span class="comment">13      */</span></div><div class="line"><span class="number">14</span>     public void prepare();</div><div class="line"><span class="number">15</span> </div><div class="line"><span class="number">16</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">17      * 烘烤阶段</span></div><div class="line"><span class="comment">18      */</span></div><div class="line"><span class="number">19</span>     public void bake();</div><div class="line"><span class="number">20</span> </div><div class="line"><span class="number">21</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">22      * 切片阶段</span></div><div class="line"><span class="comment">23      */</span></div><div class="line"><span class="number">24</span>     public void cut();</div><div class="line"><span class="number">25</span> </div><div class="line"><span class="number">26</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">27      * 包装阶段</span></div><div class="line"><span class="comment">28      */</span></div><div class="line"><span class="number">29</span>     public void box();</div><div class="line"><span class="number">30</span> &#125;</div></pre></td></tr></table></figure><p>四个披萨具体实现类：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> package xin.yangmj.factory.simple.pizza.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.factory.simple.pizza.Pizza;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 这是披萨的实现类</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * @author Eric Yang</span></div><div class="line"><span class="comment"> 9  * @create 2017-10-28 下午4:19</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> public class CheesePizza implements Pizza &#123;</div><div class="line"><span class="number">12</span> </div><div class="line"><span class="number">13</span>     @Override</div><div class="line"><span class="number">14</span>     public void prepare() &#123;</div><div class="line"><span class="number">15</span> </div><div class="line"><span class="number">16</span>         <span class="comment">// .....</span></div><div class="line"><span class="number">17</span>     &#125;</div><div class="line"><span class="number">18</span> </div><div class="line"><span class="number">19</span>     @Override</div><div class="line"><span class="number">20</span>     public void bake() &#123;</div><div class="line"><span class="number">21</span> </div><div class="line"><span class="number">22</span>         <span class="comment">// .....</span></div><div class="line"><span class="number">23</span>     &#125;</div><div class="line"><span class="number">24</span> </div><div class="line"><span class="number">25</span>     @Override</div><div class="line"><span class="number">26</span>     public void cut() &#123;</div><div class="line"><span class="number">27</span> </div><div class="line"><span class="number">28</span>         <span class="comment">// .....</span></div><div class="line"><span class="number">29</span>     &#125;</div><div class="line"><span class="number">30</span> </div><div class="line"><span class="number">31</span>     @Override</div><div class="line"><span class="number">32</span>     public void box() &#123;</div><div class="line"><span class="number">33</span> </div><div class="line"><span class="number">34</span>         <span class="comment">// .....</span></div><div class="line"><span class="number">35</span>     &#125;</div><div class="line"><span class="number">36</span> &#125;</div></pre></td></tr></table></figure><p>其它三个实现类分别为：ClamPizza，PepperoniPizza，VeggiePizza。这些实现类的方法名称都是一样，只是具体实现方法的手段不一样，在此就不把这些类都写出来了。</p><p>简单工厂类：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> package xin.yangmj.factory.simple;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.factory.simple.pizza.Pizza;</div><div class="line"> <span class="number">4</span> import xin.yangmj.factory.simple.pizza.impl.CheesePizza;</div><div class="line"> <span class="number">5</span> import xin.yangmj.factory.simple.pizza.impl.ClamPizza;</div><div class="line"> <span class="number">6</span> import xin.yangmj.factory.simple.pizza.impl.PepperoniPizza;</div><div class="line"> <span class="number">7</span> import xin.yangmj.factory.simple.pizza.impl.VeggiePizza;</div><div class="line"> <span class="number">8</span> </div><div class="line"> <span class="number">9</span> <span class="comment">/**</span></div><div class="line"><span class="comment">10  * 这是简单工厂类</span></div><div class="line"><span class="comment">11  *</span></div><div class="line"><span class="comment">12  * @author Eric Yang</span></div><div class="line"><span class="comment">13  * @create 2017-10-28 下午4:28</span></div><div class="line"><span class="comment">14  **/</span></div><div class="line"><span class="number">15</span> public class SimplePizzaFactory &#123;</div><div class="line"><span class="number">16</span> </div><div class="line"><span class="number">17</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">18      * 根据不同的类型创建不同类型的披萨</span></div><div class="line"><span class="comment">19      *</span></div><div class="line"><span class="comment">20      * @param type</span></div><div class="line"><span class="comment">21      * @return</span></div><div class="line"><span class="comment">22      */</span></div><div class="line"><span class="number">23</span>     public Pizza createPizza(String type) &#123;</div><div class="line"><span class="number">24</span> </div><div class="line"><span class="number">25</span>         Pizza pizza = null;</div><div class="line"><span class="number">26</span> </div><div class="line"><span class="number">27</span>         if (<span class="string">"cheese"</span>.equals(type)) &#123;</div><div class="line"><span class="number">28</span>             pizza = new CheesePizza();</div><div class="line"><span class="number">29</span> </div><div class="line"><span class="number">30</span>         &#125; else if (<span class="string">"pepperoni"</span>.equals(type)) &#123;</div><div class="line"><span class="number">31</span>             pizza = new PepperoniPizza();</div><div class="line"><span class="number">32</span> </div><div class="line"><span class="number">33</span>         &#125; else if (<span class="string">"clam"</span>.equals(type)) &#123;</div><div class="line"><span class="number">34</span>             pizza = new ClamPizza();</div><div class="line"><span class="number">35</span> </div><div class="line"><span class="number">36</span>         &#125; else if (<span class="string">"veggie"</span>.equals(type)) &#123;</div><div class="line"><span class="number">37</span>             pizza = new VeggiePizza();</div><div class="line"><span class="number">38</span> </div><div class="line"><span class="number">39</span>         &#125;</div><div class="line"><span class="number">40</span>         return pizza;</div><div class="line"><span class="number">41</span>     &#125;</div><div class="line"><span class="number">42</span> &#125;</div></pre></td></tr></table></figure><p>披萨店类：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> package xin.yangmj.factory.simple;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.factory.simple.pizza.Pizza;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 披萨店</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * @author Eric Yang</span></div><div class="line"><span class="comment"> 9  * @create 2017-10-28 下午4:28</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> public class PizzaStore &#123;</div><div class="line"><span class="number">12</span> </div><div class="line"><span class="number">13</span>     SimplePizzaFactory simplePizzaFactory;</div><div class="line"><span class="number">14</span> </div><div class="line"><span class="number">15</span>     public PizzaStore(SimplePizzaFactory simplePizzaFactory) &#123;</div><div class="line"><span class="number">16</span>         this.simplePizzaFactory = simplePizzaFactory;</div><div class="line"><span class="number">17</span>     &#125;</div><div class="line"><span class="number">18</span> </div><div class="line"><span class="number">19</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">20      * 订购披萨</span></div><div class="line"><span class="comment">21      *</span></div><div class="line"><span class="comment">22      * @param type</span></div><div class="line"><span class="comment">23      * @return</span></div><div class="line"><span class="comment">24      */</span></div><div class="line"><span class="number">25</span>     public Pizza orderPizza(String type) &#123;</div><div class="line"><span class="number">26</span> </div><div class="line"><span class="number">27</span>         Pizza pizza;</div><div class="line"><span class="number">28</span>         <span class="comment">// 利用简单工厂创建披萨</span></div><div class="line"><span class="number">29</span>         pizza = simplePizzaFactory.createPizza(type);</div><div class="line"><span class="number">30</span> </div><div class="line"><span class="number">31</span>         pizza.prepare();</div><div class="line"><span class="number">32</span>         pizza.bake();</div><div class="line"><span class="number">33</span>         pizza.cut();</div><div class="line"><span class="number">34</span>         pizza.box();</div><div class="line"><span class="number">35</span> </div><div class="line"><span class="number">36</span>         return pizza;</div><div class="line"><span class="number">37</span>     &#125;</div><div class="line"><span class="number">38</span> &#125;</div></pre></td></tr></table></figure><p>OK，具体代码已完成，从上面的代码可以看出，简单工厂将对象的创建从披萨店中给完全抽离出来了，也即：将其封装进一个类中，该类只有一个方法，根据不同条件创建不同的对象。这样一来，披萨店就不会管披萨的创建，代码不会显得那么的臃肿，将职责分开。其实，上面的简单工厂例子只是给大家一个引子，接下来登场的都是两个重量级的模式，隶属于工厂。</p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>　　先给出具体业务场景：现在有两家披萨加盟店，分别想制造纽约风味和芝加哥风味的披萨。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今日分享：&quot;&gt;&lt;a href=&quot;#今日分享：&quot; class=&quot;headerlink&quot; title=&quot;今日分享：&quot;&gt;&lt;/a&gt;今日分享：&lt;/h2&gt;&lt;p&gt;　　1.努力做一个可爱的人。不埋怨谁，不嘲笑谁，也不羡慕谁，阳光下灿烂，风雨中奔跑，做自己的梦，走自己的路。&lt;/p&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://yangmj.xin/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yangmj.xin/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《Head First 设计模式》之装饰者模式</title>
    <link href="https://yangmj.xin/2018/06/27/design-patterns-decorate/"/>
    <id>https://yangmj.xin/2018/06/27/design-patterns-decorate/</id>
    <published>2018-06-27T14:34:35.000Z</published>
    <updated>2019-08-31T02:23:01.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>　　时间过得挺快的，转眼间就到了十月中旬了，再晃着晃着新的一年就要来临。今天lz有幸来到了浙大图书馆来学习，想想自己已经毕业两年了，今日再次踏进校园里，心里颇有一丝感悟，说不出来，只有把它放在心里。lz前段时间看到一篇文章，觉得里面有句话说的很好，想拿出来与大家分享。文章的标题是《在写作中成长》，有句话是说，我们可以通过写作来学习，学习方法是每个输入都尽量有所输出。 无论是读书，看文章，参加技术讲座，还是看电影，尽量或多或少的总结输出出来，输出形式要么是一篇博客，要么是一篇微博，要么是一篇笔记。因为自己完全掌握的知识应该是自己能表达出来的知识。</p><h2 id="今日分享："><a href="#今日分享：" class="headerlink" title="今日分享："></a>今日分享：</h2><p>　　老样子，今天给大家带来两句话。</p><p>　　1.很喜欢这句话：你现在的气质里，藏着你走过的路，读过的书和爱过的人。</p><p>　　2.一句英文，The only you in the world, ever if no one appreciate, should love and take care of yourself.世界上唯一的你，就算没有人欣赏，也要好好爱自己。真正的美就是做自己，你不需要被大部分人认可，你只需要接受最真实的自我！</p><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>　　今天给大家带来的是装饰者模式。一说到复用我想大家脑子里的第一反应应该就是继承，通过对这个模式的学习，大家可以领悟到运行时期的扩展远比编译时期的继承威力大。也即，我们可以采取对象组合的方式，做到在运行时装饰类。貌似说的有点抽象哈，OK，下面继续和大家探讨装饰者模式。</p><p>　　<strong>咖啡实例：</strong></p><p>　　现给出一个具体的实例让大家初步感受下装饰者模式。某家咖啡连锁店里面有多种饮料供应，每种饮料也可以要求在其中加入各种调料，这家连锁店会根据所加入的调料收取不同的费用。先画出该案例的UML类图：</p><p>　　UML：</p><p>　　<img src="http://images2017.cnblogs.com/blog/1098077/201710/1098077-20171014154819762-1355032356.png" alt="img"></p><p>下面给出具体代码示例：</p><p>先给出被装饰者角色的抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.decorate.decorated;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 4  * 这是饮料抽象类，角色相当于被装饰者</span></div><div class="line"><span class="comment"> 5  *</span></div><div class="line"><span class="comment"> 6  * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> 7  * <span class="doctag">@create</span> 2017-10-14 下午2:24</span></div><div class="line"><span class="comment"> 8  **/</span></div><div class="line"> <span class="number">9</span> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line"><span class="number">10</span> </div><div class="line"><span class="number">11</span>     <span class="keyword">public</span> String description = <span class="string">"Unknown Beverage"</span>;</div><div class="line"><span class="number">12</span> </div><div class="line"><span class="number">13</span>     <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">14</span>         <span class="keyword">return</span> description;</div><div class="line"><span class="number">15</span>     &#125;</div><div class="line"><span class="number">16</span> </div><div class="line"><span class="number">17</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</div><div class="line"><span class="number">18</span> &#125;</div></pre></td></tr></table></figure><p>再给出四个具体的饮料实现类：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> package xin.yangmj.decorate.decorated.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.decorate.decorated.Beverage;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 一种具体的饮料</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * @author Eric Yang</span></div><div class="line"><span class="comment"> 9  * @create 2017-10-14 下午2:30</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> public class DarkRoast extends Beverage &#123;</div><div class="line"><span class="number">12</span> </div><div class="line"><span class="number">13</span>     public DarkRoast() &#123;</div><div class="line"><span class="number">14</span>         description = <span class="string">"Dark Roast Coffee"</span>;</div><div class="line"><span class="number">15</span>     &#125;</div><div class="line"><span class="number">16</span> </div><div class="line"><span class="number">17</span>     @Override</div><div class="line"><span class="number">18</span>     public double cost() &#123;</div><div class="line"><span class="number">19</span>         return <span class="number">2.99</span>;</div><div class="line"><span class="number">20</span>     &#125;</div><div class="line"><span class="number">21</span> &#125;</div><div class="line"> <span class="number">1</span> package xin.yangmj.decorate.decorated.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.decorate.decorated.Beverage;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 一种具体的饮料</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * @author Eric Yang</span></div><div class="line"><span class="comment"> 9  * @create 2017-10-14 下午2:30</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> public class Decaf extends Beverage &#123;</div><div class="line"><span class="number">12</span> </div><div class="line"><span class="number">13</span>     public Decaf() &#123;</div><div class="line"><span class="number">14</span>         description = <span class="string">"Decaf Coffee"</span>;</div><div class="line"><span class="number">15</span>     &#125;</div><div class="line"><span class="number">16</span> </div><div class="line"><span class="number">17</span>     @Override</div><div class="line"><span class="number">18</span>     public double cost() &#123;</div><div class="line"><span class="number">19</span>         return <span class="number">2.09</span>;</div><div class="line"><span class="number">20</span>     &#125;</div><div class="line"><span class="number">21</span> &#125;</div><div class="line"> <span class="number">1</span> package xin.yangmj.decorate.decorated.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.decorate.decorated.Beverage;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 这是浓缩咖啡，一种具体的饮料</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * @author Eric Yang</span></div><div class="line"><span class="comment"> 9  * @create 2017-10-14 下午2:30</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> public class Espresso extends Beverage &#123;</div><div class="line"><span class="number">12</span> </div><div class="line"><span class="number">13</span>     public Espresso() &#123;</div><div class="line"><span class="number">14</span>         description = <span class="string">"Espresso Coffee"</span>;</div><div class="line"><span class="number">15</span>     &#125;</div><div class="line"><span class="number">16</span> </div><div class="line"><span class="number">17</span>     @Override</div><div class="line"><span class="number">18</span>     public double cost() &#123;</div><div class="line"><span class="number">19</span>         return <span class="number">1.99</span>;</div><div class="line"><span class="number">20</span>     &#125;</div><div class="line"><span class="number">21</span> &#125;</div><div class="line"> <span class="number">1</span> package xin.yangmj.decorate.decorated.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.decorate.decorated.Beverage;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 另一种饮料的实现</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * @author Eric Yang</span></div><div class="line"><span class="comment"> 9  * @create 2017-10-14 下午2:34</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> public class HouseBlend extends Beverage &#123;</div><div class="line"><span class="number">12</span> </div><div class="line"><span class="number">13</span>     public HouseBlend() &#123;</div><div class="line"><span class="number">14</span>         description = <span class="string">"House Blend Coffee"</span>;</div><div class="line"><span class="number">15</span>     &#125;</div><div class="line"><span class="number">16</span> </div><div class="line"><span class="number">17</span>     @Override</div><div class="line"><span class="number">18</span>     public double cost() &#123;</div><div class="line"><span class="number">19</span>         return <span class="number">0.89</span>;</div><div class="line"><span class="number">20</span>     &#125;</div><div class="line"><span class="number">21</span> &#125;</div></pre></td></tr></table></figure><p>再给出抽象调料装饰者，为装饰者角色：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.decorate.decorator;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="keyword">import</span> xin.yangmj.decorate.decorated.<span class="type">Beverage</span>;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 这是调料抽象类，角色相当于装饰者</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * @author Eric Yang</span></div><div class="line"><span class="comment"> 9  * @create 2017-10-14 下午2:28</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line"><span class="number">12</span> </div><div class="line"><span class="number">13</span>     public <span class="keyword">abstract</span> <span class="type">String</span> getDescription();</div><div class="line"><span class="number">14</span> &#125;</div></pre></td></tr></table></figure><p>再给出四个具体的调料装饰者实现类：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> package xin.yangmj.decorate.decorator.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.decorate.decorated.Beverage;</div><div class="line"> <span class="number">4</span> import xin.yangmj.decorate.decorator.CondimentDecorator;</div><div class="line"> <span class="number">5</span> </div><div class="line"> <span class="number">6</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 7  * 这是调料的一种实现</span></div><div class="line"><span class="comment"> 8  *</span></div><div class="line"><span class="comment"> 9  * @author Eric Yang</span></div><div class="line"><span class="comment">10  * @create 2017-10-14 下午2:54</span></div><div class="line"><span class="comment">11  **/</span></div><div class="line"><span class="number">12</span> public class Milk extends CondimentDecorator &#123;</div><div class="line"><span class="number">13</span> </div><div class="line"><span class="number">14</span>     Beverage beverage;</div><div class="line"><span class="number">15</span> </div><div class="line"><span class="number">16</span>     public Milk(Beverage beverage) &#123;</div><div class="line"><span class="number">17</span>         this.beverage = beverage;</div><div class="line"><span class="number">18</span>     &#125;</div><div class="line"><span class="number">19</span> </div><div class="line"><span class="number">20</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">21      * 表明是该调料装饰者饮料，这也解释了</span></div><div class="line"><span class="comment">22      * 为什么调料装饰者要有个抽象的getDescription()方法</span></div><div class="line"><span class="comment">23      *</span></div><div class="line"><span class="comment">24      * @return</span></div><div class="line"><span class="comment">25      */</span></div><div class="line"><span class="number">26</span>     @Override</div><div class="line"><span class="number">27</span>     public String getDescription() &#123;</div><div class="line"><span class="number">28</span>         return beverage.getDescription() + <span class="string">", Milk"</span>;</div><div class="line"><span class="number">29</span>     &#125;</div><div class="line"><span class="number">30</span> </div><div class="line"><span class="number">31</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">32      * 这是总价钱，包含包装的饮料和此调料</span></div><div class="line"><span class="comment">33      *</span></div><div class="line"><span class="comment">34      * @return</span></div><div class="line"><span class="comment">35      */</span></div><div class="line"><span class="number">36</span>     @Override</div><div class="line"><span class="number">37</span>     public double cost() &#123;</div><div class="line"><span class="number">38</span>         return <span class="number">0.30</span> + beverage.cost();</div><div class="line"><span class="number">39</span>     &#125;</div><div class="line"><span class="number">40</span> &#125;</div><div class="line"> <span class="number">1</span> package xin.yangmj.decorate.decorator.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.decorate.decorated.Beverage;</div><div class="line"> <span class="number">4</span> import xin.yangmj.decorate.decorator.CondimentDecorator;</div><div class="line"> <span class="number">5</span> </div><div class="line"> <span class="number">6</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 7  * 这是调料的一种实现</span></div><div class="line"><span class="comment"> 8  *</span></div><div class="line"><span class="comment"> 9  * @author Eric Yang</span></div><div class="line"><span class="comment">10  * @create 2017-10-14 下午2:35</span></div><div class="line"><span class="comment">11  **/</span></div><div class="line"><span class="number">12</span> public class Mocha extends CondimentDecorator &#123;</div><div class="line"><span class="number">13</span> </div><div class="line"><span class="number">14</span>     Beverage beverage;</div><div class="line"><span class="number">15</span> </div><div class="line"><span class="number">16</span>     public Mocha(Beverage beverage) &#123;</div><div class="line"><span class="number">17</span>         this.beverage = beverage;</div><div class="line"><span class="number">18</span>     &#125;</div><div class="line"><span class="number">19</span> </div><div class="line"><span class="number">20</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">21      * 表明是该调料装饰者饮料，这也解释了</span></div><div class="line"><span class="comment">22      * 为什么调料装饰者要有个抽象的getDescription()方法</span></div><div class="line"><span class="comment">23      *</span></div><div class="line"><span class="comment">24      * @return</span></div><div class="line"><span class="comment">25      */</span></div><div class="line"><span class="number">26</span>     @Override</div><div class="line"><span class="number">27</span>     public String getDescription() &#123;</div><div class="line"><span class="number">28</span>         return beverage.getDescription() + <span class="string">", Mocha"</span>;</div><div class="line"><span class="number">29</span>     &#125;</div><div class="line"><span class="number">30</span> </div><div class="line"><span class="number">31</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">32      * 这是总价钱，包含包装的饮料和此调料</span></div><div class="line"><span class="comment">33      *</span></div><div class="line"><span class="comment">34      * @return</span></div><div class="line"><span class="comment">35      */</span></div><div class="line"><span class="number">36</span>     @Override</div><div class="line"><span class="number">37</span>     public double cost() &#123;</div><div class="line"><span class="number">38</span>         return <span class="number">0.20</span> + beverage.cost();</div><div class="line"><span class="number">39</span>     &#125;</div><div class="line"><span class="number">40</span> &#125;</div><div class="line"> <span class="number">1</span> package xin.yangmj.decorate.decorator.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.decorate.decorated.Beverage;</div><div class="line"> <span class="number">4</span> import xin.yangmj.decorate.decorator.CondimentDecorator;</div><div class="line"> <span class="number">5</span> </div><div class="line"> <span class="number">6</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 7  * 这是调料的一种实现</span></div><div class="line"><span class="comment"> 8  *</span></div><div class="line"><span class="comment"> 9  * @author Eric Yang</span></div><div class="line"><span class="comment">10  * @create 2017-10-14 下午2:54</span></div><div class="line"><span class="comment">11  **/</span></div><div class="line"><span class="number">12</span> public class Soy extends CondimentDecorator &#123;</div><div class="line"><span class="number">13</span> </div><div class="line"><span class="number">14</span>     Beverage beverage;</div><div class="line"><span class="number">15</span> </div><div class="line"><span class="number">16</span>     public Soy(Beverage beverage) &#123;</div><div class="line"><span class="number">17</span>         this.beverage = beverage;</div><div class="line"><span class="number">18</span>     &#125;</div><div class="line"><span class="number">19</span> </div><div class="line"><span class="number">20</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">21      * 表明是该调料装饰者饮料，这也解释了</span></div><div class="line"><span class="comment">22      * 为什么调料装饰者要有个抽象的getDescription()方法</span></div><div class="line"><span class="comment">23      *</span></div><div class="line"><span class="comment">24      * @return</span></div><div class="line"><span class="comment">25      */</span></div><div class="line"><span class="number">26</span>     @Override</div><div class="line"><span class="number">27</span>     public String getDescription() &#123;</div><div class="line"><span class="number">28</span>         return beverage.getDescription() + <span class="string">", Soy"</span>;</div><div class="line"><span class="number">29</span>     &#125;</div><div class="line"><span class="number">30</span> </div><div class="line"><span class="number">31</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">32      * 这是总价钱，包含包装的饮料和此调料</span></div><div class="line"><span class="comment">33      *</span></div><div class="line"><span class="comment">34      * @return</span></div><div class="line"><span class="comment">35      */</span></div><div class="line"><span class="number">36</span>     @Override</div><div class="line"><span class="number">37</span>     public double cost() &#123;</div><div class="line"><span class="number">38</span>         return <span class="number">0.15</span> + beverage.cost();</div><div class="line"><span class="number">39</span>     &#125;</div><div class="line"><span class="number">40</span> &#125;</div><div class="line"> <span class="number">1</span> package xin.yangmj.decorate.decorator.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.decorate.decorated.Beverage;</div><div class="line"> <span class="number">4</span> import xin.yangmj.decorate.decorator.CondimentDecorator;</div><div class="line"> <span class="number">5</span> </div><div class="line"> <span class="number">6</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 7  * 这是调料的一种实现</span></div><div class="line"><span class="comment"> 8  *</span></div><div class="line"><span class="comment"> 9  * @author Eric Yang</span></div><div class="line"><span class="comment">10  * @create 2017-10-14 下午2:54</span></div><div class="line"><span class="comment">11  **/</span></div><div class="line"><span class="number">12</span> public class Whip extends CondimentDecorator &#123;</div><div class="line"><span class="number">13</span> </div><div class="line"><span class="number">14</span>     Beverage beverage;</div><div class="line"><span class="number">15</span> </div><div class="line"><span class="number">16</span>     public Whip(Beverage beverage) &#123;</div><div class="line"><span class="number">17</span>         this.beverage = beverage;</div><div class="line"><span class="number">18</span>     &#125;</div><div class="line"><span class="number">19</span> </div><div class="line"><span class="number">20</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">21      * 表明是该调料装饰者饮料，这也解释了</span></div><div class="line"><span class="comment">22      * 为什么调料装饰者要有个抽象的getDescription()方法</span></div><div class="line"><span class="comment">23      *</span></div><div class="line"><span class="comment">24      * @return</span></div><div class="line"><span class="comment">25      */</span></div><div class="line"><span class="number">26</span>     @Override</div><div class="line"><span class="number">27</span>     public String getDescription() &#123;</div><div class="line"><span class="number">28</span>         return beverage.getDescription() + <span class="string">", Whip"</span>;</div><div class="line"><span class="number">29</span>     &#125;</div><div class="line"><span class="number">30</span> </div><div class="line"><span class="number">31</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">32      * 这是总价钱，包含包装的饮料和此调料</span></div><div class="line"><span class="comment">33      *</span></div><div class="line"><span class="comment">34      * @return</span></div><div class="line"><span class="comment">35      */</span></div><div class="line"><span class="number">36</span>     @Override</div><div class="line"><span class="number">37</span>     public double cost() &#123;</div><div class="line"><span class="number">38</span>         return <span class="number">0.18</span> + beverage.cost();</div><div class="line"><span class="number">39</span>     &#125;</div><div class="line"><span class="number">40</span> &#125;</div></pre></td></tr></table></figure><p>最后给出客户端测试代码:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.decorate;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="keyword">import</span> xin.yangmj.decorate.decorated.Beverage;</div><div class="line"> <span class="number">4</span> <span class="keyword">import</span> xin.yangmj.decorate.decorated.impl.DarkRoast;</div><div class="line"> <span class="number">5</span> <span class="keyword">import</span> xin.yangmj.decorate.decorated.impl.Espresso;</div><div class="line"> <span class="number">6</span> <span class="keyword">import</span> xin.yangmj.decorate.decorated.impl.HouseBlend;</div><div class="line"> <span class="number">7</span> <span class="keyword">import</span> xin.yangmj.decorate.decorator.impl.Mocha;</div><div class="line"> <span class="number">8</span> <span class="keyword">import</span> xin.yangmj.decorate.decorator.impl.Soy;</div><div class="line"> <span class="number">9</span> <span class="keyword">import</span> xin.yangmj.decorate.decorator.impl.Whip;</div><div class="line"><span class="number">10</span> </div><div class="line"><span class="number">11</span> <span class="comment">/**</span></div><div class="line"><span class="comment">12  * 这是客户端，用来测试供应咖啡</span></div><div class="line"><span class="comment">13  *</span></div><div class="line"><span class="comment">14  * @author Eric Yang</span></div><div class="line"><span class="comment">15  * @create 2017-10-14 下午2:50</span></div><div class="line"><span class="comment">16  **/</span></div><div class="line"><span class="number">17</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarbuzzCoffee</span> </span>&#123;</div><div class="line"><span class="number">18</span>     <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args)&#123;</div><div class="line"><span class="number">19</span>         Beverage beverage = <span class="keyword">new</span> <span class="type">Espresso</span>();</div><div class="line"><span class="number">20</span>         <span class="comment">// 没有加任何调料</span></div><div class="line"><span class="number">21</span>         System.out.println(beverage.getDescription() + <span class="string">"--- $"</span> + beverage.cost());</div><div class="line"><span class="number">22</span> </div><div class="line"><span class="number">23</span>         <span class="comment">// 用两个Mocha装饰它，然后再用Whip装饰</span></div><div class="line"><span class="number">24</span>         Beverage beverage2 = <span class="keyword">new</span> <span class="type">DarkRoast</span>();</div><div class="line"><span class="number">25</span>         beverage2 = <span class="keyword">new</span> <span class="type">Mocha</span>(beverage2);</div><div class="line"><span class="number">26</span>         beverage2 = <span class="keyword">new</span> <span class="type">Mocha</span>(beverage2);</div><div class="line"><span class="number">27</span>         beverage2 = <span class="keyword">new</span> <span class="type">Whip</span>(beverage2);</div><div class="line"><span class="number">28</span>         System.out.println(beverage2.getDescription() + <span class="string">"--- $"</span> + beverage2.cost());</div><div class="line"><span class="number">29</span> </div><div class="line"><span class="number">30</span>         <span class="comment">// 分别用Soy, Mocha, Whip来装饰</span></div><div class="line"><span class="number">31</span>         Beverage beverage3 = <span class="keyword">new</span> <span class="type">HouseBlend</span>();</div><div class="line"><span class="number">32</span>         beverage3 = <span class="keyword">new</span> <span class="type">Soy</span>(beverage3);</div><div class="line"><span class="number">33</span>         beverage3 = <span class="keyword">new</span> <span class="type">Mocha</span>(beverage3);</div><div class="line"><span class="number">34</span>         beverage3 = <span class="keyword">new</span> <span class="type">Whip</span>(beverage3);</div><div class="line"><span class="number">35</span>         System.out.println(beverage3.getDescription() + <span class="string">"--- $"</span> + beverage3.cost());</div><div class="line"><span class="number">36</span>     &#125;</div><div class="line"><span class="number">37</span> &#125;</div></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="http://images2017.cnblogs.com/blog/1098077/201710/1098077-20171014160645465-580567440.png" alt="img"></p><p>　　<strong>认识装饰者模式</strong></p><p>　　通过上面的例子，我们可以以饮料为主体，然后在运行时以调料来“装饰”（decorate）饮料。比如，顾客想要摩卡和奶泡深焙咖啡，那么，要做的是：</p><p>　　1.拿一个深焙咖啡（DarkRoast）对象</p><p>　　2.以摩卡（Mocha）对象装饰它</p><p>　　3.以奶泡（Whip）对象装饰它</p><p>　　4调用cost()方法，并依赖委托（delegate）将调料的价钱加上去</p><p> 　  <strong>定义装饰者模式</strong></p><p> 　  官方定义：装饰者模式动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。具体UML类图如下：</p><p>　　<strong>UML类图</strong></p><p><strong><img src="http://images2017.cnblogs.com/blog/1098077/201710/1098077-20171014170203121-177856603.png" alt="img"></strong></p><p>通过上面的定义和UML类图，可以得出关于装饰者模式的以下几点结论：</p><p>　　1.装饰者和被装饰者对象有相同的超类型。</p><p>　　2.你可以用一个或多个装饰者包装一个对象。</p><p>　　3.既然装饰者和被装饰者对象有相同的超类型，所以可以在任何需要原始对象（被包装的）的场合，都可以用装饰过的对象来替代它。</p><p>　　4.装饰者可以在所委托被装饰者的行为之前/或之后，加上自己的行为，以达到特定的目的。</p><p>　　5.对象可以在任何时候被装饰，所以可以在运行时动态地，不限量地用你喜欢的装饰者来装饰对象。</p><p> 　  <strong>满足的设计原则</strong></p><p>　　<strong>开放-关闭原则：类应该对扩展开发，对修改关闭。</strong>可以理解为，允许类容易扩展，在不修改现有代码的情况下，就可搭配新的行为。这样子的设计具有弹性可以应对改变，可以接受新的功能来应对改变的需求。具体在本例中，我们可以任意增加饮料和调料的种类，方便此咖啡店对它们的产品进行扩展，并且无需对现有的代码进行改变。只要新增加的种类满足现有的规范即可，也即：实现装饰者和被装饰者抽象类即可！</p><p>　　<strong>答惑：</strong>在此特别和大家说明一点，装饰者模式最重要的一点是：装饰者需要和被装饰者（被包装的组件）有相同的“接口”，因为，装饰者必须能取代被装饰者。也即：这两者必须是一样的类型，具有共同的超类。在这里，我们利用继承达到“类型匹配”，而不是利用继承获得“行为”。行为来自装饰者和基础组件，或与其他装饰者之间的组合关系。</p><p>　　<strong>真实世界的装饰者：Java I/O</strong></p><p>　　<strong>此处有待后续补充…</strong></p><p>　　</p><p>　　</p><p>　　</p><p>　　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;　　时间过得挺快的，转眼间就到了十月中旬了，再晃着晃着新的一年就要来临。今天lz有幸来到了浙大图书馆来学习，想想自己已经毕业两年了，
      
    
    </summary>
    
      <category term="设计模式" scheme="https://yangmj.xin/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yangmj.xin/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《Head First 设计模式》之观察者模式</title>
    <link href="https://yangmj.xin/2018/04/27/design-patterns-observer/"/>
    <id>https://yangmj.xin/2018/04/27/design-patterns-observer/</id>
    <published>2018-04-27T13:50:14.000Z</published>
    <updated>2018-08-15T14:23:06.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　昨天lz写了一篇关于策略模式的文章，感觉这篇文章写了很久才完成，而且自我感觉写的并不是很好。究其原因lz发现有以下几点。第一，lz对设计模式刚开始接触，现在也仅仅只是停留在概念阶段，没有付诸实践，没有将这些设计理论运用到项目中去，可能现在对lz来讲很难讲其吃透，不过这也能理解，对新知识的学习毕竟是要循序渐进。第二，lz觉得自己的写作能力有所欠缺，高中语文确实是没学好呃，这个只能慢慢改善了。<br><a id="more"></a><br>　　关于写博客这件事，lz看到一句话觉得说的很合理，故献给大家望共勉。“当别人请我给他们一些写 blog 的建议，我总是回他：挑个你自认为可以的时间行程安排，什么时候开始写 blog，预计多久写一篇文，开始动工，并坚持下去。在你这么做之前，任何建议对你来说都是不重要的。你文章是否写得很糟糕不重要，是否没有任何人会看你的 blog 不重要，是不是没啥有趣的东西可以记录也不重要。重要的是，只要你能透过写文来表现出写作的意愿，而且渴望持续地写作，检视、思考与改善自己的写作，你终究会成功的。”</p><h2 id="今日分享"><a href="#今日分享" class="headerlink" title="今日分享"></a>今日分享</h2><p>　　正如之前写到的一样，这块内容以后每篇文章前面都会推送给大家。今天给大家带来了两句话。<br>　　<br>　　1.该舍的，舍不得，只顾着跟往事瞎扯，等你发现时间是贼了，它早已偷光你的选择！<br>　　<br>　　2.一句英文，Life is like a ball, your initial steps of the church who may not be able to accompany you come to finish. 人生就像一场舞会，教会你最初舞步的人，未必能陪你走到散场。不乱于心，不困于情，不畏将来，不念过往。“如果微笑成为习惯，快乐也会成为习惯”</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>　　观察者模式是JDK中使用最多的模式之一，比如我们常用的java.util包，JavaBeans和Swing中，后续我们再做进一步介绍。可通俗点理解该模式为：能让你的对象知悉现况，不会错过该对象感兴趣的事情。</p><h3 id="认识观察者模式"><a href="#认识观察者模式" class="headerlink" title="　　认识观察者模式"></a>　　认识观察者模式</h3><p>　　首先看看报纸和杂志的订阅是怎么回事：</p><p>　　1.报社的业务就是出版报纸。</p><p>　　2.向某家报社订阅报纸，只要他们有新报纸出版，就会给你送来。你要你是他们的订户，你就会一直受到新报纸。</p><p>　　3.当你不想再看报纸的时候，取消订阅，他们就不会再送新报纸来。</p><p>　　4.只要报社还在运营，就会一直有人（或单位）向他们订阅报纸或取消报纸。</p><p>我想大家从上面的这份关系中可以初步了解观察者模式，其实出版者+订阅者=观察者模式。不过我们习惯将出版者称为“主题”（Subject）,订阅者称为“观察者”（Observer）。现用浅显的话语解释下，首先主题对象管理着某些数据，观察者已经订阅（注册）主题以便在主题数据改变时能够收到更新。其次当主题内的数据改变时，就会通知观察者，也即：新的数据会以某种形式送到观察者手上。当然，如果某个对象不是观察者，即使主题数据更新时也不会将新的数据通知到此对象。</p><h3 id="定义观察者模式"><a href="#定义观察者模式" class="headerlink" title="　　定义观察者模式"></a>　　定义观察者模式</h3><p>　　现给出观察者模式官方解释：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。可以理解为，主题和观察者定义了一对多关系。观察者依赖于此主题，只要主题状态一有变化，观察者就会被通知。根据通知的风格，观察者可能因此新值而更新。其实实现观察者模式的方法不止一种，但是以包含Subject和Observer接口的类设计的做法最为常见，下面给出该模式类图。</p><p>UML类图</p><p><img src="https://yangmj.xin/uploads/photos/观察者模式官方UML.png" alt=""></p><h3 id="气象站实例"><a href="#气象站实例" class="headerlink" title="　　气象站实例"></a>　　气象站实例</h3><p>　　现给出具体需求：某公司需要建立下一代气象站，且必须建立在给出的WeatherData对象上，由该对象负责追踪目前的天气状况（温度，湿度，气压）。希望能建立一个应用，有三种布告板，分别显示目前的状况，气象统计及简单的预报。当WeatherData对象获得最新的测量数据时，三种布告板必须要实时更新。最后这是一个可扩展的气象站，也即：希望能实现自己的布告板并插入到此应用中。</p><p>　　现给出该应用UML图：<br><img src="https://yangmj.xin/uploads/photos/观察者模式UML-示例.png" alt=""></p><p>下面我们再来具体实现该气象站，首先从接口开始，</p><p>主题接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> xin.yangmj.observer.subject;</div><div class="line"></div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.observe.Observer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 这是主题接口，所有具体主题都应实现此接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-10-07 下午3:56</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>观察者接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xin.yangmj.observer.observe;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 这是观察者接口，所有具体观察者都应实现此接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-10-07 下午4:00</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>布告板接口，也即：具体布告板要实现此接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xin.yangmj.observer.observe;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 这是布告板接口，用来展示获取到的数据</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-10-07 下午4:06</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后，在写出具体的实现类</p><p>首先是具体主题实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xin.yangmj.observer.subject.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.observe.Observer;</div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.subject.Subject;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 这是WeatherData类，实现主题接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-10-07 下午4:08</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 用来封装主题所管理的观察者</span></div><div class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 用于注册观察者到该主题中</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line">        observers.add(o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 若观察者想取消注册，则调用该方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> i = observers.indexOf(<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</div><div class="line">            observers.remove(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 通知观察者，将主题最新数据告知每个注册的观察者</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</div><div class="line">            observer.update(temperature, humidity, pressure);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 当从气象站得到更新观测值时，通知观察者</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        notifyObserver();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 动态改变观测值</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> temperature</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> humidity</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pressure</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.temperature = temperature;</div><div class="line">        <span class="keyword">this</span>.humidity = humidity;</div><div class="line">        <span class="keyword">this</span>.pressure = pressure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// WeatherData的其他方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>给出某一个布告板实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xin.yangmj.observer.observe.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.observe.DisplayElement;</div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.observe.Observer;</div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.subject.Subject;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体布告板，相当于具体观察者实现类</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-10-07 下午4:28</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">    <span class="keyword">private</span> Subject weatherData;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 通过构造器，可以将此观察者注册到主题中</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> weatherData</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.weatherData = weatherData;</div><div class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 当观测值更新时，将最新数据保存起来</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> temperature</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> humidity</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pressure</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.temperature = temperature;</div><div class="line">        <span class="keyword">this</span>.humidity = humidity;</div><div class="line">        display();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 在该布告板上展示最新的观测值数据</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Current conditions: "</span> + temperature +</div><div class="line">                <span class="string">"F degrees and "</span> + humidity + <span class="string">"% humidity"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>启动气象站，测试用例：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xin.yangmj.observer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.observe.impl.CurrentConditionsDisplay;</div><div class="line"><span class="keyword">import</span> xin.yangmj.observer.subject.impl.WeatherData;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 测试类，可用于启动气象站</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @author Eric Yang</span></div><div class="line"><span class="comment"> * @create 2017-10-07 下午4:39</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args)&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 创建具体主题，并初始化所管理的观察者为空</span></div><div class="line">        WeatherData weatherData = <span class="keyword">new</span> <span class="type">WeatherData</span>();</div><div class="line"></div><div class="line">        <span class="comment">// 暂时只写一个面板，其他类似eg:StatisticsDisplay, ForecastDisplay等</span></div><div class="line">        <span class="comment">// 也可以后续扩展，实现自己特定的面板</span></div><div class="line">        <span class="comment">// 创建该观察者，隐含了将该观察者注册到上面具体主题中</span></div><div class="line">        CurrentConditionsDisplay currentConditionsDisplay =</div><div class="line">                <span class="keyword">new</span> <span class="type">CurrentConditionsDisplay</span>(weatherData);</div><div class="line"></div><div class="line">        weatherData.setMeasurements(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4</span>f);</div><div class="line">        <span class="comment">// 通知观察者</span></div><div class="line">        weatherData.notifyObserver();</div><div class="line">        <span class="comment">// 测量值发生变化</span></div><div class="line">        weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">29.3</span>f);</div><div class="line">        weatherData.measurementsChanged();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://yangmj.xin/uploads/photos/0D11E3DC-62A6-4D99-A5AF-BE8E4C72B6FF.png" alt=""></p><p>OK，以上就是整个气象站应用的代码。现对整个应用做个总结如下</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="　　设计原则"></a>　　设计原则</h3><p>　　观察者模式遵循了以下几个设计原则：</p><p>　　1.为了交互对象之间的松耦合而努力。也即：让主题和观察者之间松耦合。关于观察者的一切，主题只知道观察者实现了某个接口（也就是Observer接口），主题不需要知道观察者的具体类是谁，做了些什么或其他任何细节。有新类型的观察者出现时，主题的代码不需要修改，因为主题唯一依赖的东西是一个实现Observer接口的对象列表。我们可以独立地复用主题或观察者，改变主题或观察者其中一方，并不会影响另一方，所以二者是松耦合的。</p><p>　　2.封装变化。在此模式中，会改变的是主题的状态，以及观察者的数目是类型。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题，也即：提前规划。</p><p>　　3.针对接口编程。主题和观察者都是用接口：观察者利用主题的接口想主题注册，而主题利用观察者接口通知观察者。这样可以让二者之间运作正常，又同时具有松耦合的有点。</p><p>　　4.多用组合，少用继承。该模式利用“组合”将许多观察者组合进主题中。对象之间的这种关系不是通过继承产生的，而是在运行时利用组合的方式来产生的。</p><p>　　使用Java内置的观察者模式</p><p>　　未完待续…　　</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　昨天lz写了一篇关于策略模式的文章，感觉这篇文章写了很久才完成，而且自我感觉写的并不是很好。究其原因lz发现有以下几点。第一，lz对设计模式刚开始接触，现在也仅仅只是停留在概念阶段，没有付诸实践，没有将这些设计理论运用到项目中去，可能现在对lz来讲很难讲其吃透，不过这也能理解，对新知识的学习毕竟是要循序渐进。第二，lz觉得自己的写作能力有所欠缺，高中语文确实是没学好呃，这个只能慢慢改善了。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://yangmj.xin/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yangmj.xin/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《Head First 设计模式》之策略模式</title>
    <link href="https://yangmj.xin/2018/03/27/design-patterns-strategy/"/>
    <id>https://yangmj.xin/2018/03/27/design-patterns-strategy/</id>
    <published>2018-03-27T12:40:15.000Z</published>
    <updated>2019-08-31T02:20:53.929Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h3><p>　　昨晚lz在博客园里写了第一篇文章，虽然不是关于技术方面的，但终究算是正式开启了自己写作的生涯。曾经lz加入了一个微信群，是关于英语学习的。这个群里每天早上都会推送一条今日分享，其实就是一句中文和一句英文。当然这推送内容应该说是精挑细选的，会给人传递一些比较正能量的东西。lz觉得这种行为还是比较有意义的，所以，lz会在日后每条文章前面放上这些分享，希望能和广大友人共勉。</p><p>　　最近，lz在学习设计模式，书籍为友人推荐的《Head First 设计模式》，心里有些体会，故将它写下来望能和大家共同交流和学习，写的不好还请大家多多见谅。今天给大家带来的是lz学完策略模式之后的感悟！</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>　　lz想摘录书中比较经典的话，使用模式最好的方式是：“把模式装进脑子里，然后在你的设计和已有的应用中，寻找何处可以使用它们。”以往是代码复用，现在是经验复用。</p><p>　　先给出模拟鸭子这个应用的最终版本，其UML类图如下：</p><p><img src="http://images2017.cnblogs.com/blog/1098077/201710/1098077-20171006152649458-1148635449.png" alt="img"></p><p> 上面这几个类，接口之间的关系还是很简单，相信大家都能看得懂哈!</p><p>　　 再给出具体的类，接口的示例代码如下</p><p>　　 封装飞行行为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.strategy.behavior.fly;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 4  * 这是飞行行为接口</span></div><div class="line"><span class="comment"> 5  *</span></div><div class="line"><span class="comment"> 6  * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> 7  * <span class="doctag">@create</span> 2017-10-06 下午1:31</span></div><div class="line"><span class="comment"> 8  **/</span></div><div class="line"> <span class="number">9</span> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</div><div class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</div><div class="line"><span class="number">11</span> &#125;</div></pre></td></tr></table></figure><p>　　 具体的飞行行为实现类：</p><p>代表会飞的鸭子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.strategy.behavior.fly.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="keyword">import</span> xin.yangmj.strategy.behavior.fly.FlyBehavior;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 这是飞行行为得实现，给“真会”飞的鸭子用...</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> 9  * <span class="doctag">@create</span> 2017-10-06 下午1:33</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</div><div class="line"><span class="number">12</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">13</span>         System.out.println(<span class="string">"I'm flying!!!"</span>);</div><div class="line"><span class="number">14</span>     &#125;</div><div class="line"><span class="number">15</span> &#125;</div></pre></td></tr></table></figure><p>代表不会飞的鸭子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.strategy.behavior.fly.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="keyword">import</span> xin.yangmj.strategy.behavior.fly.FlyBehavior;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 这是飞行行为的实现，给“不会”飞的鸭子用...</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> 9  * <span class="doctag">@create</span> 2017-10-06 下午1:36</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</div><div class="line"><span class="number">12</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">13</span>         System.out.println(<span class="string">"I can't fly!!!"</span>);</div><div class="line"><span class="number">14</span>     &#125;</div><div class="line"><span class="number">15</span> &#125;</div></pre></td></tr></table></figure><p>拥有火箭动力的鸭子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.strategy.behavior.fly.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="keyword">import</span> xin.yangmj.strategy.behavior.fly.FlyBehavior;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 拥有火箭动力的飞行行为</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> 9  * <span class="doctag">@create</span> 2017-10-06 下午2:16</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyRocketPowered</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</div><div class="line"><span class="number">12</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">13</span>         System.out.println(<span class="string">"I'm flying with a rocket!"</span>);</div><div class="line"><span class="number">14</span>     &#125;</div><div class="line"><span class="number">15</span> &#125;</div></pre></td></tr></table></figure><p>以上三个为具体的飞行行为实现类</p><p>针对鸭子叫的行为的不同，故也可以分为多种实现，如下；</p><p>首先封装呱呱叫行为，也即，抽象为超类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.strategy.behavior.quack;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 4  * 这是叫的行为接口</span></div><div class="line"><span class="comment"> 5  *</span></div><div class="line"><span class="comment"> 6  * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> 7  * <span class="doctag">@create</span> 2017-10-06 下午1:40</span></div><div class="line"><span class="comment"> 8  **/</span></div><div class="line"> <span class="number">9</span> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123;</div><div class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</div><div class="line"><span class="number">11</span> &#125;</div></pre></td></tr></table></figure><p>其次根据呱呱叫个区别有如下三个实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.strategy.behavior.quack.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="keyword">import</span> xin.yangmj.strategy.behavior.quack.QuackBehavior;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 什么都不做</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> 9  * <span class="doctag">@create</span> 2017-10-06 下午1:43</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</div><div class="line"><span class="number">12</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">13</span>         System.out.println(<span class="string">"&lt;&lt; Silence &gt;&gt;"</span>);</div><div class="line"><span class="number">14</span>     &#125;</div><div class="line"><span class="number">15</span> &#125;</div><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.strategy.behavior.quack.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="keyword">import</span> xin.yangmj.strategy.behavior.quack.QuackBehavior;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 鸭子呱呱叫类</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> 9  * <span class="doctag">@create</span> 2017-10-06 下午1:41</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</div><div class="line"><span class="number">12</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">13</span>         System.out.println(<span class="string">"Quack"</span>);</div><div class="line"><span class="number">14</span>     &#125;</div><div class="line"><span class="number">15</span> &#125;</div><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.strategy.behavior.quack.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="keyword">import</span> xin.yangmj.strategy.behavior.quack.QuackBehavior;</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 6  * 橡皮鸭吱吱叫类</span></div><div class="line"><span class="comment"> 7  *</span></div><div class="line"><span class="comment"> 8  * <span class="doctag">@author</span> Eric Yang</span></div><div class="line"><span class="comment"> 9  * <span class="doctag">@create</span> 2017-10-06 下午1:45</span></div><div class="line"><span class="comment">10  **/</span></div><div class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</div><div class="line"><span class="number">12</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">13</span>         System.out.println(<span class="string">"Squeak"</span>);</div><div class="line"><span class="number">14</span>     &#125;</div><div class="line"><span class="number">15</span> &#125;</div></pre></td></tr></table></figure><p>现在给出鸭子超类：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> package xin.yangmj.strategy.duck;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.strategy.behavior.fly.FlyBehavior;</div><div class="line"> <span class="number">4</span> import xin.yangmj.strategy.behavior.quack.QuackBehavior;</div><div class="line"> <span class="number">5</span> </div><div class="line"> <span class="number">6</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 7  * 这是鸭子抽象类</span></div><div class="line"><span class="comment"> 8  *</span></div><div class="line"><span class="comment"> 9  * @author Eric Yang</span></div><div class="line"><span class="comment">10  * @create 2017-10-06 下午1:29</span></div><div class="line"><span class="comment">11  **/</span></div><div class="line"><span class="number">12</span> public abstract class Duck &#123;</div><div class="line"><span class="number">13</span> </div><div class="line"><span class="number">14</span>     <span class="comment">// 加上这两个public目的：Duck和其实现类不在同一包下，且Duck在外层包下</span></div><div class="line"><span class="number">15</span>     public FlyBehavior flyBehavior;</div><div class="line"><span class="number">16</span>     public QuackBehavior quackBehavior;</div><div class="line"><span class="number">17</span> </div><div class="line"><span class="number">18</span>     public Duck()&#123;&#125;</div><div class="line"><span class="number">19</span> </div><div class="line"><span class="number">20</span>     <span class="comment">// 委托给行为类</span></div><div class="line"><span class="number">21</span>     public void performFly() &#123;</div><div class="line"><span class="number">22</span>         flyBehavior.fly();</div><div class="line"><span class="number">23</span>     &#125;</div><div class="line"><span class="number">24</span>     public void performQuack() &#123;</div><div class="line"><span class="number">25</span>         quackBehavior.quack();</div><div class="line"><span class="number">26</span>     &#125;</div><div class="line"><span class="number">27</span> </div><div class="line"><span class="number">28</span>     <span class="comment">// 所有鸭子共有的行为</span></div><div class="line"><span class="number">29</span>     public void swim() &#123;</div><div class="line"><span class="number">30</span>         System.out.println(<span class="string">"All ducks float, even decoys!"</span>);</div><div class="line"><span class="number">31</span>     &#125;</div><div class="line"><span class="number">32</span> </div><div class="line"><span class="number">33</span>     public abstract void display();</div><div class="line"><span class="number">34</span> </div><div class="line"><span class="number">35</span>     <span class="comment">// 动态设定行为</span></div><div class="line"><span class="number">36</span>     public void setFlyBehavior(FlyBehavior fb) &#123;</div><div class="line"><span class="number">37</span>         flyBehavior = fb;</div><div class="line"><span class="number">38</span>     &#125;</div><div class="line"><span class="number">39</span>     public void setQuackBehavior(QuackBehavior qb) &#123;</div><div class="line"><span class="number">40</span>         quackBehavior = qb;</div><div class="line"><span class="number">41</span>     &#125;</div><div class="line"><span class="number">42</span> </div><div class="line"><span class="number">43</span> &#125;</div></pre></td></tr></table></figure><p>再给出两个鸭子的具体实现类：</p><p>这是绿头鸭子</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.strategy.duck.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="keyword">import</span> xin.yangmj.strategy.behavior.fly.impl.<span class="type">FlyWithWings</span>;</div><div class="line"> <span class="number">4</span> <span class="keyword">import</span> xin.yangmj.strategy.behavior.quack.impl.<span class="type">Quack</span>;</div><div class="line"> <span class="number">5</span> <span class="keyword">import</span> xin.yangmj.strategy.duck.<span class="type">Duck</span>;</div><div class="line"> <span class="number">6</span> </div><div class="line"> <span class="number">7</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 8  * 这是绿头鸭子</span></div><div class="line"><span class="comment"> 9  *</span></div><div class="line"><span class="comment">10  * @author Eric Yang</span></div><div class="line"><span class="comment">11  * @create 2017-10-06 下午2:05</span></div><div class="line"><span class="comment">12  **/</span></div><div class="line"><span class="number">13</span> public <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</div><div class="line"><span class="number">14</span> </div><div class="line"><span class="number">15</span>     public <span class="type">MallardDuck</span>() &#123;</div><div class="line"><span class="number">16</span>         flyBehavior = <span class="keyword">new</span> <span class="type">FlyWithWings</span>();</div><div class="line"><span class="number">17</span>         quackBehavior = <span class="keyword">new</span> <span class="type">Quack</span>();</div><div class="line"><span class="number">18</span>     &#125;</div><div class="line"><span class="number">19</span> </div><div class="line"><span class="number">20</span>     public void display() &#123;</div><div class="line"><span class="number">21</span>         <span class="type">System</span>.out.println(<span class="string">"I'm a real Mallard duck!"</span>);</div><div class="line"><span class="number">22</span>     &#125;</div><div class="line"><span class="number">23</span> &#125;</div></pre></td></tr></table></figure><p>这是模型鸭子</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">package</span> xin.yangmj.strategy.duck.impl;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> <span class="keyword">import</span> xin.yangmj.strategy.behavior.fly.impl.<span class="type">FlyNoWay</span>;</div><div class="line"> <span class="number">4</span> <span class="keyword">import</span> xin.yangmj.strategy.behavior.quack.impl.<span class="type">Quack</span>;</div><div class="line"> <span class="number">5</span> <span class="keyword">import</span> xin.yangmj.strategy.duck.<span class="type">Duck</span>;</div><div class="line"> <span class="number">6</span> </div><div class="line"> <span class="number">7</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 8  * 模型鸭子</span></div><div class="line"><span class="comment"> 9  *</span></div><div class="line"><span class="comment">10  * @author Eric Yang</span></div><div class="line"><span class="comment">11  * @create 2017-10-06 下午2:11</span></div><div class="line"><span class="comment">12  **/</span></div><div class="line"><span class="number">13</span> public <span class="class"><span class="keyword">class</span> <span class="title">ModelDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</div><div class="line"><span class="number">14</span> </div><div class="line"><span class="number">15</span>     public <span class="type">ModelDuck</span>() &#123;</div><div class="line"><span class="number">16</span>         flyBehavior = <span class="keyword">new</span> <span class="type">FlyNoWay</span>();</div><div class="line"><span class="number">17</span>         quackBehavior = <span class="keyword">new</span> <span class="type">Quack</span>();</div><div class="line"><span class="number">18</span>     &#125;</div><div class="line"><span class="number">19</span> </div><div class="line"><span class="number">20</span>     public void display() &#123;</div><div class="line"><span class="number">21</span>         <span class="type">System</span>.out.println(<span class="string">"I'm a model duck!"</span>);</div><div class="line"><span class="number">22</span>     &#125;</div><div class="line"><span class="number">23</span> &#125;</div></pre></td></tr></table></figure><p>最后给出测试代码：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> package xin.yangmj.strategy;</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> import xin.yangmj.strategy.behavior.fly.impl.FlyRocketPowered;</div><div class="line"> <span class="number">4</span> import xin.yangmj.strategy.duck.Duck;</div><div class="line"> <span class="number">5</span> import xin.yangmj.strategy.duck.impl.MallardDuck;</div><div class="line"> <span class="number">6</span> import xin.yangmj.strategy.duck.impl.ModelDuck;</div><div class="line"> <span class="number">7</span> </div><div class="line"> <span class="number">8</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 9  * 这是整个策略模式的测试类</span></div><div class="line"><span class="comment">10  *</span></div><div class="line"><span class="comment">11  * @author Eric Yang</span></div><div class="line"><span class="comment">12  * @create 2017-10-06 下午2:33</span></div><div class="line"><span class="comment">13  **/</span></div><div class="line"><span class="number">14</span> public class MiniDuckSimulator &#123;</div><div class="line"><span class="number">15</span>     public static void main(String[] args) &#123;</div><div class="line"><span class="number">16</span>         Duck mallard = new MallardDuck();</div><div class="line"><span class="number">17</span>         mallard.performFly();</div><div class="line"><span class="number">18</span>         mallard.performQuack();</div><div class="line"><span class="number">19</span> </div><div class="line"><span class="number">20</span>         <span class="comment">// 动态设定行为</span></div><div class="line"><span class="number">21</span>         Duck model = new ModelDuck();</div><div class="line"><span class="number">22</span>         model.performFly();</div><div class="line"><span class="number">23</span>         <span class="comment">// 更改运行行为</span></div><div class="line"><span class="number">24</span>         model.setFlyBehavior(new FlyRocketPowered());</div><div class="line"><span class="number">25</span>         model.performFly();</div><div class="line"><span class="number">26</span> </div><div class="line"><span class="number">27</span>         <span class="comment">// 哈哈哈，这是测试Git</span></div><div class="line"><span class="number">28</span>     &#125;</div><div class="line"><span class="number">29</span> &#125;</div></pre></td></tr></table></figure><p>运行结果：</p><p> <img src="http://images2017.cnblogs.com/blog/1098077/201710/1098077-20171006155602443-1141011125.png" alt="img"></p><p> <strong>策略模式定义</strong>：定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p><p>　　 通过上面的简单介绍可以总结出策略模式运用到的几个设计原则：</p><p>　　 1.找出应用中可能需要变化之处，把它们独立出来，不要和哪些不需要变化的代码混在一起。—<strong>封装变化</strong>，以便以后可以轻易地改动或扩充此部分，而不影响不需要变化的其他部分。在本例中，我们并没有将鸭子的两个行为fly()和quack()放到Duck类里面，这些行为会随着鸭子的不同而改变，让所有的子类都有这些行为是不恰当的，比如，某些鸭子可能不会飞等。所以，我们必须要将这两个行为从Duck类中分离出来，通过建立一组新类来代表每个行为，可以理解为定义中的算法族。这样的设计，可以让飞行和呱呱叫的动作行为被其他的对象复用，因为这些行为已经与鸭子类无关了，而我们也可以新增一些行为，不会影响到既有的行为类，也不会影响“使用”到飞行行为得鸭子类。这么一来，有了继承的“复用”好处，却没有继承所带来的包袱。</p><p>　　 2.<strong>针对接口编程，而不是针对实现编程。</strong>我们可以利用接口代表每个行为，比如说，FlyBehavior与QuackBehavior，而行为得每个实现都将实现其中的一个接口，这样一来，鸭子的子类将使用这两个行为接口所表示的行为，所以实际的“实现”不会被绑死在鸭子的子类中，也即，鸭子类就不再需要知道行为的实现细节。</p><p>　　 3.<strong>多用组合，少用继承。</strong>“有一个”可能比“是一个”更好，本例中，每个鸭子都有飞和叫的行为，将这两个类结合起来使用，就是我们所说的组合。组合和“继承”的区别在于，鸭子的行为不是继承来的，而是和适当的行为对象“组合”来的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;　　昨晚lz在博客园里写了第一篇文章，虽然不是关于技术方面的，但终究算是正式开启了自己写作的生涯。曾经lz
      
    
    </summary>
    
      <category term="设计模式" scheme="https://yangmj.xin/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yangmj.xin/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
