<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《Head First 设计模式》之工厂模式]]></title>
    <url>%2F2018%2F08%2F23%2Fdesign-patterns-factory%2F</url>
    <content type="text"><![CDATA[今日分享： 1.努力做一个可爱的人。不埋怨谁，不嘲笑谁，也不羡慕谁，阳光下灿烂，风雨中奔跑，做自己的梦，走自己的路。 2.一句英文，The sign of maturity is not when you start speaking big things, but, actually it is, when you start understanding small things.成熟的标志不是会说大道理，而是你开始去理解身边的小事情。 人生的旅途中，最清晰的脚印，往往印在最泥泞的路上，所以，别畏惧暂时的困顿，即使无人鼓掌，也要全情投入，优雅坚持。真正改变命运的，并不是等来的机遇，而是我们的态度。 工厂模式 工厂（factory）用来处理创建对象的细节。工厂模式实质上应该包含三部分，简单工厂、工厂方法和抽象工厂。我们会按照次序来一一介绍这三部分。 简单工厂 简单工厂其实算不上是一个真正意义上的设计模式，反而比较像是一种编程习惯。它仅仅只是封装了创建对象的细节。下面看一个具体的实例。假设你有一个披萨店，有很多类型的披萨。如何根据不同的条件创建正确类型的披萨。现给出具体的代码： 披萨接口及其实现类： 123456789101112131415161718192021222324252627282930 1 package xin.yangmj.factory.simple.pizza; 2 3 /** 4 * 这是披萨接口 5 * 6 * @author Eric Yang 7 * @create 2017-10-28 下午4:09 8 **/ 9 public interface Pizza &#123;10 11 /**12 * 准备阶段13 */14 public void prepare();15 16 /**17 * 烘烤阶段18 */19 public void bake();20 21 /**22 * 切片阶段23 */24 public void cut();25 26 /**27 * 包装阶段28 */29 public void box();30 &#125; 四个披萨具体实现类： 123456789101112131415161718192021222324252627282930313233343536 1 package xin.yangmj.factory.simple.pizza.impl; 2 3 import xin.yangmj.factory.simple.pizza.Pizza; 4 5 /** 6 * 这是披萨的实现类 7 * 8 * @author Eric Yang 9 * @create 2017-10-28 下午4:1910 **/11 public class CheesePizza implements Pizza &#123;12 13 @Override14 public void prepare() &#123;15 16 // .....17 &#125;18 19 @Override20 public void bake() &#123;21 22 // .....23 &#125;24 25 @Override26 public void cut() &#123;27 28 // .....29 &#125;30 31 @Override32 public void box() &#123;33 34 // .....35 &#125;36 &#125; 其它三个实现类分别为：ClamPizza，PepperoniPizza，VeggiePizza。这些实现类的方法名称都是一样，只是具体实现方法的手段不一样，在此就不把这些类都写出来了。 简单工厂类： 123456789101112131415161718192021222324252627282930313233343536373839404142 1 package xin.yangmj.factory.simple; 2 3 import xin.yangmj.factory.simple.pizza.Pizza; 4 import xin.yangmj.factory.simple.pizza.impl.CheesePizza; 5 import xin.yangmj.factory.simple.pizza.impl.ClamPizza; 6 import xin.yangmj.factory.simple.pizza.impl.PepperoniPizza; 7 import xin.yangmj.factory.simple.pizza.impl.VeggiePizza; 8 9 /**10 * 这是简单工厂类11 *12 * @author Eric Yang13 * @create 2017-10-28 下午4:2814 **/15 public class SimplePizzaFactory &#123;16 17 /**18 * 根据不同的类型创建不同类型的披萨19 *20 * @param type21 * @return22 */23 public Pizza createPizza(String type) &#123;24 25 Pizza pizza = null;26 27 if ("cheese".equals(type)) &#123;28 pizza = new CheesePizza();29 30 &#125; else if ("pepperoni".equals(type)) &#123;31 pizza = new PepperoniPizza();32 33 &#125; else if ("clam".equals(type)) &#123;34 pizza = new ClamPizza();35 36 &#125; else if ("veggie".equals(type)) &#123;37 pizza = new VeggiePizza();38 39 &#125;40 return pizza;41 &#125;42 &#125; 披萨店类： 1234567891011121314151617181920212223242526272829303132333435363738 1 package xin.yangmj.factory.simple; 2 3 import xin.yangmj.factory.simple.pizza.Pizza; 4 5 /** 6 * 披萨店 7 * 8 * @author Eric Yang 9 * @create 2017-10-28 下午4:2810 **/11 public class PizzaStore &#123;12 13 SimplePizzaFactory simplePizzaFactory;14 15 public PizzaStore(SimplePizzaFactory simplePizzaFactory) &#123;16 this.simplePizzaFactory = simplePizzaFactory;17 &#125;18 19 /**20 * 订购披萨21 *22 * @param type23 * @return24 */25 public Pizza orderPizza(String type) &#123;26 27 Pizza pizza;28 // 利用简单工厂创建披萨29 pizza = simplePizzaFactory.createPizza(type);30 31 pizza.prepare();32 pizza.bake();33 pizza.cut();34 pizza.box();35 36 return pizza;37 &#125;38 &#125; OK，具体代码已完成，从上面的代码可以看出，简单工厂将对象的创建从披萨店中给完全抽离出来了，也即：将其封装进一个类中，该类只有一个方法，根据不同条件创建不同的对象。这样一来，披萨店就不会管披萨的创建，代码不会显得那么的臃肿，将职责分开。其实，上面的简单工厂例子只是给大家一个引子，接下来登场的都是两个重量级的模式，隶属于工厂。 工厂方法 先给出具体业务场景：现在有两家披萨加盟店，分别想制造纽约风味和芝加哥风味的披萨。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《Head First 设计模式》之装饰者模式]]></title>
    <url>%2F2018%2F06%2F27%2Fdesign-patterns-decorate%2F</url>
    <content type="text"><![CDATA[前言： 时间过得挺快的，转眼间就到了十月中旬了，再晃着晃着新的一年就要来临。今天lz有幸来到了浙大图书馆来学习，想想自己已经毕业几年了，今日再次踏进校园里，心里颇有一丝感悟，说不出来，只有把它放在心里。lz前段时间看到一篇文章，觉得里面有句话说的很好，想拿出来与大家分享。文章的标题是《在写作中成长》，有句话是说，我们可以通过写作来学习，学习方法是每个输入都尽量有所输出。 无论是读书，看文章，参加技术讲座，还是看电影，尽量或多或少的总结输出出来，输出形式要么是一篇博客，要么是一篇微博，要么是一篇笔记。因为自己完全掌握的知识应该是自己能表达出来的知识。 今日分享： 老样子，今天给大家带来两句话。 1.很喜欢这句话：你现在的气质里，藏着你走过的路，读过的书和爱过的人。 2.一句英文，The only you in the world, ever if no one appreciate, should love and take care of yourself.世界上唯一的你，就算没有人欣赏，也要好好爱自己。真正的美就是做自己，你不需要被大部分人认可，你只需要接受最真实的自我！ 装饰者模式 今天给大家带来的是装饰者模式。一说到复用我想大家脑子里的第一反应应该就是继承，通过对这个模式的学习，大家可以领悟到运行时期的扩展远比编译时期的继承威力大。也即，我们可以采取对象组合的方式，做到在运行时装饰类。貌似说的有点抽象哈，OK，下面继续和大家探讨装饰者模式。 咖啡实例： 现给出一个具体的实例让大家初步感受下装饰者模式。某家咖啡连锁店里面有多种饮料供应，每种饮料也可以要求在其中加入各种调料，这家连锁店会根据所加入的调料收取不同的费用。先画出该案例的UML类图： UML： 下面给出具体代码示例： 先给出被装饰者角色的抽象类： 123456789101112131415161718 1 package xin.yangmj.decorate.decorated; 2 3 /** 4 * 这是饮料抽象类，角色相当于被装饰者 5 * 6 * @author Eric Yang 7 * @create 2017-10-14 下午2:24 8 **/ 9 public abstract class Beverage &#123;10 11 public String description = "Unknown Beverage";12 13 public String getDescription() &#123;14 return description;15 &#125;16 17 public abstract double cost();18 &#125; 再给出四个具体的饮料实现类： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384 1 package xin.yangmj.decorate.decorated.impl; 2 3 import xin.yangmj.decorate.decorated.Beverage; 4 5 /** 6 * 一种具体的饮料 7 * 8 * @author Eric Yang 9 * @create 2017-10-14 下午2:3010 **/11 public class DarkRoast extends Beverage &#123;12 13 public DarkRoast() &#123;14 description = "Dark Roast Coffee";15 &#125;16 17 @Override18 public double cost() &#123;19 return 2.99;20 &#125;21 &#125; 1 package xin.yangmj.decorate.decorated.impl; 2 3 import xin.yangmj.decorate.decorated.Beverage; 4 5 /** 6 * 一种具体的饮料 7 * 8 * @author Eric Yang 9 * @create 2017-10-14 下午2:3010 **/11 public class Decaf extends Beverage &#123;12 13 public Decaf() &#123;14 description = "Decaf Coffee";15 &#125;16 17 @Override18 public double cost() &#123;19 return 2.09;20 &#125;21 &#125; 1 package xin.yangmj.decorate.decorated.impl; 2 3 import xin.yangmj.decorate.decorated.Beverage; 4 5 /** 6 * 这是浓缩咖啡，一种具体的饮料 7 * 8 * @author Eric Yang 9 * @create 2017-10-14 下午2:3010 **/11 public class Espresso extends Beverage &#123;12 13 public Espresso() &#123;14 description = "Espresso Coffee";15 &#125;16 17 @Override18 public double cost() &#123;19 return 1.99;20 &#125;21 &#125; 1 package xin.yangmj.decorate.decorated.impl; 2 3 import xin.yangmj.decorate.decorated.Beverage; 4 5 /** 6 * 另一种饮料的实现 7 * 8 * @author Eric Yang 9 * @create 2017-10-14 下午2:3410 **/11 public class HouseBlend extends Beverage &#123;12 13 public HouseBlend() &#123;14 description = "House Blend Coffee";15 &#125;16 17 @Override18 public double cost() &#123;19 return 0.89;20 &#125;21 &#125; 再给出抽象调料装饰者，为装饰者角色： 1234567891011121314 1 package xin.yangmj.decorate.decorator; 2 3 import xin.yangmj.decorate.decorated.Beverage; 4 5 /** 6 * 这是调料抽象类，角色相当于装饰者 7 * 8 * @author Eric Yang 9 * @create 2017-10-14 下午2:2810 **/11 public abstract class CondimentDecorator extends Beverage &#123;12 13 public abstract String getDescription();14 &#125; 再给出四个具体的调料装饰者实现类： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160 1 package xin.yangmj.decorate.decorator.impl; 2 3 import xin.yangmj.decorate.decorated.Beverage; 4 import xin.yangmj.decorate.decorator.CondimentDecorator; 5 6 /** 7 * 这是调料的一种实现 8 * 9 * @author Eric Yang10 * @create 2017-10-14 下午2:5411 **/12 public class Milk extends CondimentDecorator &#123;13 14 Beverage beverage;15 16 public Milk(Beverage beverage) &#123;17 this.beverage = beverage;18 &#125;19 20 /**21 * 表明是该调料装饰者饮料，这也解释了22 * 为什么调料装饰者要有个抽象的getDescription()方法23 *24 * @return25 */26 @Override27 public String getDescription() &#123;28 return beverage.getDescription() + ", Milk";29 &#125;30 31 /**32 * 这是总价钱，包含包装的饮料和此调料33 *34 * @return35 */36 @Override37 public double cost() &#123;38 return 0.30 + beverage.cost();39 &#125;40 &#125; 1 package xin.yangmj.decorate.decorator.impl; 2 3 import xin.yangmj.decorate.decorated.Beverage; 4 import xin.yangmj.decorate.decorator.CondimentDecorator; 5 6 /** 7 * 这是调料的一种实现 8 * 9 * @author Eric Yang10 * @create 2017-10-14 下午2:3511 **/12 public class Mocha extends CondimentDecorator &#123;13 14 Beverage beverage;15 16 public Mocha(Beverage beverage) &#123;17 this.beverage = beverage;18 &#125;19 20 /**21 * 表明是该调料装饰者饮料，这也解释了22 * 为什么调料装饰者要有个抽象的getDescription()方法23 *24 * @return25 */26 @Override27 public String getDescription() &#123;28 return beverage.getDescription() + ", Mocha";29 &#125;30 31 /**32 * 这是总价钱，包含包装的饮料和此调料33 *34 * @return35 */36 @Override37 public double cost() &#123;38 return 0.20 + beverage.cost();39 &#125;40 &#125; 1 package xin.yangmj.decorate.decorator.impl; 2 3 import xin.yangmj.decorate.decorated.Beverage; 4 import xin.yangmj.decorate.decorator.CondimentDecorator; 5 6 /** 7 * 这是调料的一种实现 8 * 9 * @author Eric Yang10 * @create 2017-10-14 下午2:5411 **/12 public class Soy extends CondimentDecorator &#123;13 14 Beverage beverage;15 16 public Soy(Beverage beverage) &#123;17 this.beverage = beverage;18 &#125;19 20 /**21 * 表明是该调料装饰者饮料，这也解释了22 * 为什么调料装饰者要有个抽象的getDescription()方法23 *24 * @return25 */26 @Override27 public String getDescription() &#123;28 return beverage.getDescription() + ", Soy";29 &#125;30 31 /**32 * 这是总价钱，包含包装的饮料和此调料33 *34 * @return35 */36 @Override37 public double cost() &#123;38 return 0.15 + beverage.cost();39 &#125;40 &#125; 1 package xin.yangmj.decorate.decorator.impl; 2 3 import xin.yangmj.decorate.decorated.Beverage; 4 import xin.yangmj.decorate.decorator.CondimentDecorator; 5 6 /** 7 * 这是调料的一种实现 8 * 9 * @author Eric Yang10 * @create 2017-10-14 下午2:5411 **/12 public class Whip extends CondimentDecorator &#123;13 14 Beverage beverage;15 16 public Whip(Beverage beverage) &#123;17 this.beverage = beverage;18 &#125;19 20 /**21 * 表明是该调料装饰者饮料，这也解释了22 * 为什么调料装饰者要有个抽象的getDescription()方法23 *24 * @return25 */26 @Override27 public String getDescription() &#123;28 return beverage.getDescription() + ", Whip";29 &#125;30 31 /**32 * 这是总价钱，包含包装的饮料和此调料33 *34 * @return35 */36 @Override37 public double cost() &#123;38 return 0.18 + beverage.cost();39 &#125;40 &#125; 最后给出客户端测试代码: 12345678910111213141516171819202122232425262728293031323334353637 1 package xin.yangmj.decorate; 2 3 import xin.yangmj.decorate.decorated.Beverage; 4 import xin.yangmj.decorate.decorated.impl.DarkRoast; 5 import xin.yangmj.decorate.decorated.impl.Espresso; 6 import xin.yangmj.decorate.decorated.impl.HouseBlend; 7 import xin.yangmj.decorate.decorator.impl.Mocha; 8 import xin.yangmj.decorate.decorator.impl.Soy; 9 import xin.yangmj.decorate.decorator.impl.Whip;10 11 /**12 * 这是客户端，用来测试供应咖啡13 *14 * @author Eric Yang15 * @create 2017-10-14 下午2:5016 **/17 public class StarbuzzCoffee &#123;18 public static void main(String[] args)&#123;19 Beverage beverage = new Espresso();20 // 没有加任何调料21 System.out.println(beverage.getDescription() + "--- $" + beverage.cost());22 23 // 用两个Mocha装饰它，然后再用Whip装饰24 Beverage beverage2 = new DarkRoast();25 beverage2 = new Mocha(beverage2);26 beverage2 = new Mocha(beverage2);27 beverage2 = new Whip(beverage2);28 System.out.println(beverage2.getDescription() + "--- $" + beverage2.cost());29 30 // 分别用Soy, Mocha, Whip来装饰31 Beverage beverage3 = new HouseBlend();32 beverage3 = new Soy(beverage3);33 beverage3 = new Mocha(beverage3);34 beverage3 = new Whip(beverage3);35 System.out.println(beverage3.getDescription() + "--- $" + beverage3.cost());36 &#125;37 &#125; 运行结果如下： 认识装饰者模式 通过上面的例子，我们可以以饮料为主体，然后在运行时以调料来“装饰”（decorate）饮料。比如，顾客想要摩卡和奶泡深焙咖啡，那么，要做的是： 1.拿一个深焙咖啡（DarkRoast）对象 2.以摩卡（Mocha）对象装饰它 3.以奶泡（Whip）对象装饰它 4调用cost()方法，并依赖委托（delegate）将调料的价钱加上去 定义装饰者模式 官方定义：装饰者模式动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。具体UML类图如下： UML类图 通过上面的定义和UML类图，可以得出关于装饰者模式的以下几点结论： 1.装饰者和被装饰者对象有相同的超类型。 2.你可以用一个或多个装饰者包装一个对象。 3.既然装饰者和被装饰者对象有相同的超类型，所以可以在任何需要原始对象（被包装的）的场合，都可以用装饰过的对象来替代它。 4.装饰者可以在所委托被装饰者的行为之前/或之后，加上自己的行为，以达到特定的目的。 5.对象可以在任何时候被装饰，所以可以在运行时动态地，不限量地用你喜欢的装饰者来装饰对象。 满足的设计原则 开放-关闭原则：类应该对扩展开发，对修改关闭。可以理解为，允许类容易扩展，在不修改现有代码的情况下，就可搭配新的行为。这样子的设计具有弹性可以应对改变，可以接受新的功能来应对改变的需求。具体在本例中，我们可以任意增加饮料和调料的种类，方便此咖啡店对它们的产品进行扩展，并且无需对现有的代码进行改变。只要新增加的种类满足现有的规范即可，也即：实现装饰者和被装饰者抽象类即可！ 答惑：在此特别和大家说明一点，装饰者模式最重要的一点是：装饰者需要和被装饰者（被包装的组件）有相同的“接口”，因为，装饰者必须能取代被装饰者。也即：这两者必须是一样的类型，具有共同的超类。在这里，我们利用继承达到“类型匹配”，而不是利用继承获得“行为”。行为来自装饰者和基础组件，或与其他装饰者之间的组合关系。 真实世界的装饰者：Java I/O 此处有待后续补充…]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《Head First 设计模式》之观察者模式]]></title>
    <url>%2F2018%2F04%2F27%2Fdesign-patterns-observer%2F</url>
    <content type="text"><![CDATA[前言 昨天lz写了一篇关于策略模式的文章，感觉这篇文章写了很久才完成，而且自我感觉写的并不是很好。究其原因lz发现有以下几点。第一，lz对设计模式刚开始接触，现在也仅仅只是停留在概念阶段，没有付诸实践，没有将这些设计理论运用到项目中去，可能现在对lz来讲很难讲其吃透，不过这也能理解，对新知识的学习毕竟是要循序渐进。第二，lz觉得自己的写作能力有所欠缺，高中语文确实是没学好呃，这个只能慢慢改善了。 关于写博客这件事，lz看到一句话觉得说的很合理，故献给大家望共勉。“当别人请我给他们一些写 blog 的建议，我总是回他：挑个你自认为可以的时间行程安排，什么时候开始写 blog，预计多久写一篇文，开始动工，并坚持下去。在你这么做之前，任何建议对你来说都是不重要的。你文章是否写得很糟糕不重要，是否没有任何人会看你的 blog 不重要，是不是没啥有趣的东西可以记录也不重要。重要的是，只要你能透过写文来表现出写作的意愿，而且渴望持续地写作，检视、思考与改善自己的写作，你终究会成功的。” 今日分享 正如之前写到的一样，这块内容以后每篇文章前面都会推送给大家。今天给大家带来了两句话。 1.该舍的，舍不得，只顾着跟往事瞎扯，等你发现时间是贼了，它早已偷光你的选择！ 2.一句英文，Life is like a ball, your initial steps of the church who may not be able to accompany you come to finish. 人生就像一场舞会，教会你最初舞步的人，未必能陪你走到散场。不乱于心，不困于情，不畏将来，不念过往。“如果微笑成为习惯，快乐也会成为习惯” 观察者模式 观察者模式是JDK中使用最多的模式之一，比如我们常用的java.util包，JavaBeans和Swing中，后续我们再做进一步介绍。可通俗点理解该模式为：能让你的对象知悉现况，不会错过该对象感兴趣的事情。 认识观察者模式 首先看看报纸和杂志的订阅是怎么回事： 1.报社的业务就是出版报纸。 2.向某家报社订阅报纸，只要他们有新报纸出版，就会给你送来。你要你是他们的订户，你就会一直受到新报纸。 3.当你不想再看报纸的时候，取消订阅，他们就不会再送新报纸来。 4.只要报社还在运营，就会一直有人（或单位）向他们订阅报纸或取消报纸。 我想大家从上面的这份关系中可以初步了解观察者模式，其实出版者+订阅者=观察者模式。不过我们习惯将出版者称为“主题”（Subject）,订阅者称为“观察者”（Observer）。现用浅显的话语解释下，首先主题对象管理着某些数据，观察者已经订阅（注册）主题以便在主题数据改变时能够收到更新。其次当主题内的数据改变时，就会通知观察者，也即：新的数据会以某种形式送到观察者手上。当然，如果某个对象不是观察者，即使主题数据更新时也不会将新的数据通知到此对象。 定义观察者模式 现给出观察者模式官方解释：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。可以理解为，主题和观察者定义了一对多关系。观察者依赖于此主题，只要主题状态一有变化，观察者就会被通知。根据通知的风格，观察者可能因此新值而更新。其实实现观察者模式的方法不止一种，但是以包含Subject和Observer接口的类设计的做法最为常见，下面给出该模式类图。 UML类图 气象站实例 现给出具体需求：某公司需要建立下一代气象站，且必须建立在给出的WeatherData对象上，由该对象负责追踪目前的天气状况（温度，湿度，气压）。希望能建立一个应用，有三种布告板，分别显示目前的状况，气象统计及简单的预报。当WeatherData对象获得最新的测量数据时，三种布告板必须要实时更新。最后这是一个可扩展的气象站，也即：希望能实现自己的布告板并插入到此应用中。 现给出该应用UML图： 下面我们再来具体实现该气象站，首先从接口开始， 主题接口： 1234567891011121314151617package xin.yangmj.observer.subject;import xin.yangmj.observer.observe.Observer;/** * 这是主题接口，所有具体主题都应实现此接口 * * @author Eric Yang * @create 2017-10-07 下午3:56 **/public interface Subject &#123; public void registerObserver(Observer o); public void removeObserver(Observer o); public void notifyObserver();&#125; 观察者接口： 123456789101112package xin.yangmj.observer.observe;/** * 这是观察者接口，所有具体观察者都应实现此接口 * * @author Eric Yang * @create 2017-10-07 下午4:00 **/public interface Observer &#123; public void update(float temp, float humidity, float pressure);&#125; 布告板接口，也即：具体布告板要实现此接口： 123456789101112package xin.yangmj.observer.observe;/** * 这是布告板接口，用来展示获取到的数据 * * @author Eric Yang * @create 2017-10-07 下午4:06 **/public interface DisplayElement &#123; public void display();&#125; 然后，在写出具体的实现类 首先是具体主题实现类： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980package xin.yangmj.observer.subject.impl;import xin.yangmj.observer.observe.Observer;import xin.yangmj.observer.subject.Subject;import java.util.ArrayList;import java.util.List;/** * 这是WeatherData类，实现主题接口 * * @author Eric Yang * @create 2017-10-07 下午4:08 **/public class WeatherData implements Subject &#123; // 用来封装主题所管理的观察者 private List&lt;Observer&gt; observers; private float temperature; private float humidity; private float pressure; public WeatherData() &#123; this.observers = new ArrayList&lt;Observer&gt;(); &#125; /** * 用于注册观察者到该主题中 * * @param o */ public void registerObserver(Observer o) &#123; observers.add(o); &#125; /** * 若观察者想取消注册，则调用该方法 * * @param o */ public void removeObserver(Observer o) &#123; int i = observers.indexOf(0); if (i &gt;= 0) &#123; observers.remove(i); &#125; &#125; /** * 通知观察者，将主题最新数据告知每个注册的观察者 */ public void notifyObserver() &#123; for (Observer observer : observers) &#123; observer.update(temperature, humidity, pressure); &#125; &#125; /** * 当从气象站得到更新观测值时，通知观察者 */ public void measurementsChanged() &#123; notifyObserver(); &#125; /** * 动态改变观测值 * * @param temperature * @param humidity * @param pressure */ public void setMeasurements(float temperature, float humidity, float pressure) &#123; this.temperature = temperature; this.humidity = humidity; this.pressure = pressure; &#125; // WeatherData的其他方法&#125; 给出某一个布告板实现类： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package xin.yangmj.observer.observe.impl;import xin.yangmj.observer.observe.DisplayElement;import xin.yangmj.observer.observe.Observer;import xin.yangmj.observer.subject.Subject;/** * 具体布告板，相当于具体观察者实现类 * * @author Eric Yang * @create 2017-10-07 下午4:28 **/public class CurrentConditionsDisplay implements Observer, DisplayElement&#123; private float temperature; private float humidity; private Subject weatherData; /** * 通过构造器，可以将此观察者注册到主题中 * * @param weatherData */ public CurrentConditionsDisplay(Subject weatherData) &#123; this.weatherData = weatherData; weatherData.registerObserver(this); &#125; /** * 当观测值更新时，将最新数据保存起来 * * @param temperature * @param humidity * @param pressure */ public void update(float temperature, float humidity, float pressure) &#123; this.temperature = temperature; this.humidity = humidity; display(); &#125; /** * 在该布告板上展示最新的观测值数据 */ public void display() &#123; System.out.println("Current conditions: " + temperature + "F degrees and " + humidity + "% humidity"); &#125;&#125; 启动气象站，测试用例： 1234567891011121314151617181920212223242526272829303132package xin.yangmj.observer;import xin.yangmj.observer.observe.impl.CurrentConditionsDisplay;import xin.yangmj.observer.subject.impl.WeatherData;/** * 测试类，可用于启动气象站 * * @author Eric Yang * @create 2017-10-07 下午4:39 **/public class WeatherStation &#123; public static void main(String[] args)&#123; // 创建具体主题，并初始化所管理的观察者为空 WeatherData weatherData = new WeatherData(); // 暂时只写一个面板，其他类似eg:StatisticsDisplay, ForecastDisplay等 // 也可以后续扩展，实现自己特定的面板 // 创建该观察者，隐含了将该观察者注册到上面具体主题中 CurrentConditionsDisplay currentConditionsDisplay = new CurrentConditionsDisplay(weatherData); weatherData.setMeasurements(80, 65, 30.4f); // 通知观察者 weatherData.notifyObserver(); // 测量值发生变化 weatherData.setMeasurements(82, 70, 29.3f); weatherData.measurementsChanged(); &#125;&#125; 运行结果： OK，以上就是整个气象站应用的代码。现对整个应用做个总结如下 设计原则 观察者模式遵循了以下几个设计原则： 1.为了交互对象之间的松耦合而努力。也即：让主题和观察者之间松耦合。关于观察者的一切，主题只知道观察者实现了某个接口（也就是Observer接口），主题不需要知道观察者的具体类是谁，做了些什么或其他任何细节。有新类型的观察者出现时，主题的代码不需要修改，因为主题唯一依赖的东西是一个实现Observer接口的对象列表。我们可以独立地复用主题或观察者，改变主题或观察者其中一方，并不会影响另一方，所以二者是松耦合的。 2.封装变化。在此模式中，会改变的是主题的状态，以及观察者的数目是类型。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题，也即：提前规划。 3.针对接口编程。主题和观察者都是用接口：观察者利用主题的接口想主题注册，而主题利用观察者接口通知观察者。这样可以让二者之间运作正常，又同时具有松耦合的有点。 4.多用组合，少用继承。该模式利用“组合”将许多观察者组合进主题中。对象之间的这种关系不是通过继承产生的，而是在运行时利用组合的方式来产生的。 使用Java内置的观察者模式 未完待续…]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《Head First 设计模式》之策略模式]]></title>
    <url>%2F2018%2F03%2F27%2Fdesign-patterns-strategy%2F</url>
    <content type="text"><![CDATA[前言 昨晚lz在博客园里写了第一篇文章，虽然不是关于技术方面的，但终究算是正式开启了自己写作的生涯。曾经lz加入了一个微信群，是关于英语学习的。这个群里每天早上都会推送一条今日分享，其实就是一句中文和一句英文。当然这推送内容应该说是精挑细选的，会给人传递一些比较正能量的东西。lz觉得这种行为还是比较有意义的，所以，lz会在日后每条文章前面放上这些分享，希望能和广大友人共勉。 最近，lz在学习设计模式，书籍为友人推荐的《Head First 设计模式》，心里有些体会，故将它写下来望能和大家共同交流和学习，写的不好还请大家多多见谅。今天给大家带来的是lz学完策略模式之后的感悟！ 策略模式 lz想摘录书中比较经典的话，使用模式最好的方式是：“把模式装进脑子里，然后在你的设计和已有的应用中，寻找何处可以使用它们。”以往是代码复用，现在是经验复用。 先给出模拟鸭子这个应用的最终版本，其UML类图如下： 上面这几个类，接口之间的关系还是很简单，相信大家都能看得懂哈! 再给出具体的类，接口的示例代码如下 封装飞行行为： 1234567891011 1 package xin.yangmj.strategy.behavior.fly; 2 3 /** 4 * 这是飞行行为接口 5 * 6 * @author Eric Yang 7 * @create 2017-10-06 下午1:31 8 **/ 9 public interface FlyBehavior &#123;10 public void fly();11 &#125; 具体的飞行行为实现类： 代表会飞的鸭子： 123456789101112131415 1 package xin.yangmj.strategy.behavior.fly.impl; 2 3 import xin.yangmj.strategy.behavior.fly.FlyBehavior; 4 5 /** 6 * 这是飞行行为得实现，给“真会”飞的鸭子用... 7 * 8 * @author Eric Yang 9 * @create 2017-10-06 下午1:3310 **/11 public class FlyWithWings implements FlyBehavior &#123;12 public void fly() &#123;13 System.out.println("I'm flying!!!");14 &#125;15 &#125; 代表不会飞的鸭子： 123456789101112131415 1 package xin.yangmj.strategy.behavior.fly.impl; 2 3 import xin.yangmj.strategy.behavior.fly.FlyBehavior; 4 5 /** 6 * 这是飞行行为的实现，给“不会”飞的鸭子用... 7 * 8 * @author Eric Yang 9 * @create 2017-10-06 下午1:3610 **/11 public class FlyNoWay implements FlyBehavior &#123;12 public void fly() &#123;13 System.out.println("I can't fly!!!");14 &#125;15 &#125; 拥有火箭动力的鸭子： 123456789101112131415 1 package xin.yangmj.strategy.behavior.fly.impl; 2 3 import xin.yangmj.strategy.behavior.fly.FlyBehavior; 4 5 /** 6 * 拥有火箭动力的飞行行为 7 * 8 * @author Eric Yang 9 * @create 2017-10-06 下午2:1610 **/11 public class FlyRocketPowered implements FlyBehavior &#123;12 public void fly() &#123;13 System.out.println("I'm flying with a rocket!");14 &#125;15 &#125; 以上三个为具体的飞行行为实现类 针对鸭子叫的行为的不同，故也可以分为多种实现，如下； 首先封装呱呱叫行为，也即，抽象为超类 1234567891011 1 package xin.yangmj.strategy.behavior.quack; 2 3 /** 4 * 这是叫的行为接口 5 * 6 * @author Eric Yang 7 * @create 2017-10-06 下午1:40 8 **/ 9 public interface QuackBehavior &#123;10 public void quack();11 &#125; 其次根据呱呱叫个区别有如下三个实现类 123456789101112131415161718192021222324252627282930313233343536373839404142434445 1 package xin.yangmj.strategy.behavior.quack.impl; 2 3 import xin.yangmj.strategy.behavior.quack.QuackBehavior; 4 5 /** 6 * 什么都不做 7 * 8 * @author Eric Yang 9 * @create 2017-10-06 下午1:4310 **/11 public class MuteQuack implements QuackBehavior &#123;12 public void quack() &#123;13 System.out.println("&lt;&lt; Silence &gt;&gt;");14 &#125;15 &#125; 1 package xin.yangmj.strategy.behavior.quack.impl; 2 3 import xin.yangmj.strategy.behavior.quack.QuackBehavior; 4 5 /** 6 * 鸭子呱呱叫类 7 * 8 * @author Eric Yang 9 * @create 2017-10-06 下午1:4110 **/11 public class Quack implements QuackBehavior &#123;12 public void quack() &#123;13 System.out.println("Quack");14 &#125;15 &#125; 1 package xin.yangmj.strategy.behavior.quack.impl; 2 3 import xin.yangmj.strategy.behavior.quack.QuackBehavior; 4 5 /** 6 * 橡皮鸭吱吱叫类 7 * 8 * @author Eric Yang 9 * @create 2017-10-06 下午1:4510 **/11 public class Squeak implements QuackBehavior &#123;12 public void quack() &#123;13 System.out.println("Squeak");14 &#125;15 &#125; 现在给出鸭子超类： 12345678910111213141516171819202122232425262728293031323334353637383940414243 1 package xin.yangmj.strategy.duck; 2 3 import xin.yangmj.strategy.behavior.fly.FlyBehavior; 4 import xin.yangmj.strategy.behavior.quack.QuackBehavior; 5 6 /** 7 * 这是鸭子抽象类 8 * 9 * @author Eric Yang10 * @create 2017-10-06 下午1:2911 **/12 public abstract class Duck &#123;13 14 // 加上这两个public目的：Duck和其实现类不在同一包下，且Duck在外层包下15 public FlyBehavior flyBehavior;16 public QuackBehavior quackBehavior;17 18 public Duck()&#123;&#125;19 20 // 委托给行为类21 public void performFly() &#123;22 flyBehavior.fly();23 &#125;24 public void performQuack() &#123;25 quackBehavior.quack();26 &#125;27 28 // 所有鸭子共有的行为29 public void swim() &#123;30 System.out.println("All ducks float, even decoys!");31 &#125;32 33 public abstract void display();34 35 // 动态设定行为36 public void setFlyBehavior(FlyBehavior fb) &#123;37 flyBehavior = fb;38 &#125;39 public void setQuackBehavior(QuackBehavior qb) &#123;40 quackBehavior = qb;41 &#125;42 43 &#125; 再给出两个鸭子的具体实现类： 这是绿头鸭子 1234567891011121314151617181920212223 1 package xin.yangmj.strategy.duck.impl; 2 3 import xin.yangmj.strategy.behavior.fly.impl.FlyWithWings; 4 import xin.yangmj.strategy.behavior.quack.impl.Quack; 5 import xin.yangmj.strategy.duck.Duck; 6 7 /** 8 * 这是绿头鸭子 9 *10 * @author Eric Yang11 * @create 2017-10-06 下午2:0512 **/13 public class MallardDuck extends Duck &#123;14 15 public MallardDuck() &#123;16 flyBehavior = new FlyWithWings();17 quackBehavior = new Quack();18 &#125;19 20 public void display() &#123;21 System.out.println("I'm a real Mallard duck!");22 &#125;23 &#125; 这是模型鸭子 1234567891011121314151617181920212223 1 package xin.yangmj.strategy.duck.impl; 2 3 import xin.yangmj.strategy.behavior.fly.impl.FlyNoWay; 4 import xin.yangmj.strategy.behavior.quack.impl.Quack; 5 import xin.yangmj.strategy.duck.Duck; 6 7 /** 8 * 模型鸭子 9 *10 * @author Eric Yang11 * @create 2017-10-06 下午2:1112 **/13 public class ModelDuck extends Duck &#123;14 15 public ModelDuck() &#123;16 flyBehavior = new FlyNoWay();17 quackBehavior = new Quack();18 &#125;19 20 public void display() &#123;21 System.out.println("I'm a model duck!");22 &#125;23 &#125; 最后给出测试代码： 1234567891011121314151617181920212223242526272829 1 package xin.yangmj.strategy; 2 3 import xin.yangmj.strategy.behavior.fly.impl.FlyRocketPowered; 4 import xin.yangmj.strategy.duck.Duck; 5 import xin.yangmj.strategy.duck.impl.MallardDuck; 6 import xin.yangmj.strategy.duck.impl.ModelDuck; 7 8 /** 9 * 这是整个策略模式的测试类10 *11 * @author Eric Yang12 * @create 2017-10-06 下午2:3313 **/14 public class MiniDuckSimulator &#123;15 public static void main(String[] args) &#123;16 Duck mallard = new MallardDuck();17 mallard.performFly();18 mallard.performQuack();19 20 // 动态设定行为21 Duck model = new ModelDuck();22 model.performFly();23 // 更改运行行为24 model.setFlyBehavior(new FlyRocketPowered());25 model.performFly();26 27 // 哈哈哈，这是测试Git28 &#125;29 &#125; 运行结果： 策略模式定义：定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。 通过上面的简单介绍可以总结出策略模式运用到的几个设计原则： 1.找出应用中可能需要变化之处，把它们独立出来，不要和哪些不需要变化的代码混在一起。—封装变化，以便以后可以轻易地改动或扩充此部分，而不影响不需要变化的其他部分。在本例中，我们并没有将鸭子的两个行为fly()和quack()放到Duck类里面，这些行为会随着鸭子的不同而改变，让所有的子类都有这些行为是不恰当的，比如，某些鸭子可能不会飞等。所以，我们必须要将这两个行为从Duck类中分离出来，通过建立一组新类来代表每个行为，可以理解为定义中的算法族。这样的设计，可以让飞行和呱呱叫的动作行为被其他的对象复用，因为这些行为已经与鸭子类无关了，而我们也可以新增一些行为，不会影响到既有的行为类，也不会影响“使用”到飞行行为得鸭子类。这么一来，有了继承的“复用”好处，却没有继承所带来的包袱。 2.针对接口编程，而不是针对实现编程。我们可以利用接口代表每个行为，比如说，FlyBehavior与QuackBehavior，而行为得每个实现都将实现其中的一个接口，这样一来，鸭子的子类将使用这两个行为接口所表示的行为，所以实际的“实现”不会被绑死在鸭子的子类中，也即，鸭子类就不再需要知道行为的实现细节。 3.多用组合，少用继承。“有一个”可能比“是一个”更好，本例中，每个鸭子都有飞和叫的行为，将这两个类结合起来使用，就是我们所说的组合。组合和“继承”的区别在于，鸭子的行为不是继承来的，而是和适当的行为对象“组合”来的。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
